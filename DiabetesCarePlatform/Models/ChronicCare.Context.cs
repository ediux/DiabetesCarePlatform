//------------------------------------------------------------------------------
// <auto-generated>
//     這個程式碼是由範本產生。
//
//     對這個檔案進行手動變更可能導致您的應用程式產生未預期的行為。
//     如果重新產生程式碼，將會覆寫對這個檔案的手動變更。
// </auto-generated>
//------------------------------------------------------------------------------

namespace DiabetesCarePlatform.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ChronicCareEntities : DbContext
    {
        public ChronicCareEntities()
            : base("name=ChronicCareEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__RefactorLog> C__RefactorLog { get; set; }
        public virtual DbSet<APP_InviteCode> APP_InviteCode { get; set; }
        public virtual DbSet<APP_LoginUser> APP_LoginUser { get; set; }
        public virtual DbSet<APP_Partner> APP_Partner { get; set; }
        public virtual DbSet<APP_User> APP_User { get; set; }
        public virtual DbSet<APP_VerifyCode> APP_VerifyCode { get; set; }
        public virtual DbSet<APP_VerifyNumber> APP_VerifyNumber { get; set; }
        public virtual DbSet<CG_CareGroup> CG_CareGroup { get; set; }
        public virtual DbSet<CG_HealthEducation> CG_HealthEducation { get; set; }
        public virtual DbSet<CG_HealthEducationOrder> CG_HealthEducationOrder { get; set; }
        public virtual DbSet<CG_ServiceRecord> CG_ServiceRecord { get; set; }
        public virtual DbSet<CG_WorkShift> CG_WorkShift { get; set; }
        public virtual DbSet<CG_WorkShiftBase> CG_WorkShiftBase { get; set; }
        public virtual DbSet<CMR_DiabetesAlert> CMR_DiabetesAlert { get; set; }
        public virtual DbSet<CMR_DiabetesAlertConfig> CMR_DiabetesAlertConfig { get; set; }
        public virtual DbSet<CMR_DiabetesMessage> CMR_DiabetesMessage { get; set; }
        public virtual DbSet<CMR_DiabetesPlan> CMR_DiabetesPlan { get; set; }
        public virtual DbSet<CMR_PatientBase> CMR_PatientBase { get; set; }
        public virtual DbSet<CMR_PatientDetails> CMR_PatientDetails { get; set; }
        public virtual DbSet<CMR_PatientKey> CMR_PatientKey { get; set; }
        public virtual DbSet<MR_MeetingRoomAssigned> MR_MeetingRoomAssigned { get; set; }
        public virtual DbSet<MR_MeetingRooms> MR_MeetingRooms { get; set; }
        public virtual DbSet<MR_MeetingRoomTimeAssigened> MR_MeetingRoomTimeAssigened { get; set; }
        public virtual DbSet<MR_MeetingRoomTimes> MR_MeetingRoomTimes { get; set; }
        public virtual DbSet<MR_ZoomMeetings> MR_ZoomMeetings { get; set; }
        public virtual DbSet<PME_ExaminationHead> PME_ExaminationHead { get; set; }
        public virtual DbSet<PME_ExaminationType> PME_ExaminationType { get; set; }
        public virtual DbSet<PME_TagName> PME_TagName { get; set; }
        public virtual DbSet<PMR_Medicine> PMR_Medicine { get; set; }
        public virtual DbSet<PMR_PathologyHead> PMR_PathologyHead { get; set; }
        public virtual DbSet<PMR_PathologyType> PMR_PathologyType { get; set; }
        public virtual DbSet<PMR_TagName> PMR_TagName { get; set; }
        public virtual DbSet<SYS_AppointmentStatus> SYS_AppointmentStatus { get; set; }
        public virtual DbSet<SYS_ArecaTypeID> SYS_ArecaTypeID { get; set; }
        public virtual DbSet<SYS_BloodRhType> SYS_BloodRhType { get; set; }
        public virtual DbSet<SYS_BloodType> SYS_BloodType { get; set; }
        public virtual DbSet<SYS_CaseStatus> SYS_CaseStatus { get; set; }
        public virtual DbSet<SYS_ChronicSubType> SYS_ChronicSubType { get; set; }
        public virtual DbSet<SYS_ChronicType> SYS_ChronicType { get; set; }
        public virtual DbSet<SYS_City> SYS_City { get; set; }
        public virtual DbSet<SYS_Country> SYS_Country { get; set; }
        public virtual DbSet<SYS_DiabetesAlertConfig> SYS_DiabetesAlertConfig { get; set; }
        public virtual DbSet<SYS_DiabetesAlertType> SYS_DiabetesAlertType { get; set; }
        public virtual DbSet<SYS_DisableType> SYS_DisableType { get; set; }
        public virtual DbSet<SYS_District> SYS_District { get; set; }
        public virtual DbSet<SYS_DrinkTypeID> SYS_DrinkTypeID { get; set; }
        public virtual DbSet<SYS_EducationLevel> SYS_EducationLevel { get; set; }
        public virtual DbSet<SYS_FamilyHistoryType> SYS_FamilyHistoryType { get; set; }
        public virtual DbSet<SYS_FoodType> SYS_FoodType { get; set; }
        public virtual DbSet<SYS_Function> SYS_Function { get; set; }
        public virtual DbSet<SYS_Holiday> SYS_Holiday { get; set; }
        public virtual DbSet<SYS_LanguageType> SYS_LanguageType { get; set; }
        public virtual DbSet<SYS_LivingStatus> SYS_LivingStatus { get; set; }
        public virtual DbSet<SYS_LoginUser> SYS_LoginUser { get; set; }
        public virtual DbSet<SYS_MaritalStatus> SYS_MaritalStatus { get; set; }
        public virtual DbSet<SYS_MealType> SYS_MealType { get; set; }
        public virtual DbSet<SYS_Medicine> SYS_Medicine { get; set; }
        public virtual DbSet<SYS_NewsType> SYS_NewsType { get; set; }
        public virtual DbSet<SYS_ProfessionType> SYS_ProfessionType { get; set; }
        public virtual DbSet<SYS_RaceType> SYS_RaceType { get; set; }
        public virtual DbSet<SYS_RelationshipType> SYS_RelationshipType { get; set; }
        public virtual DbSet<SYS_ReligionType> SYS_ReligionType { get; set; }
        public virtual DbSet<SYS_Role> SYS_Role { get; set; }
        public virtual DbSet<SYS_RoleFunction> SYS_RoleFunction { get; set; }
        public virtual DbSet<SYS_ServiceRecordType> SYS_ServiceRecordType { get; set; }
        public virtual DbSet<SYS_ServiceResult> SYS_ServiceResult { get; set; }
        public virtual DbSet<SYS_ServiceType> SYS_ServiceType { get; set; }
        public virtual DbSet<SYS_SexType> SYS_SexType { get; set; }
        public virtual DbSet<SYS_SmokeType> SYS_SmokeType { get; set; }
        public virtual DbSet<SYS_State> SYS_State { get; set; }
        public virtual DbSet<SYS_TimingType> SYS_TimingType { get; set; }
        public virtual DbSet<SYS_Unit> SYS_Unit { get; set; }
        public virtual DbSet<SYS_UnitAssignRole_Del> SYS_UnitAssignRole_Del { get; set; }
        public virtual DbSet<SYS_UnitDetails> SYS_UnitDetails { get; set; }
        public virtual DbSet<SYS_UnitRankType> SYS_UnitRankType { get; set; }
        public virtual DbSet<SYS_UnitTask> SYS_UnitTask { get; set; }
        public virtual DbSet<SYS_User> SYS_User { get; set; }
        public virtual DbSet<SYS_UserAssignRole> SYS_UserAssignRole { get; set; }
        public virtual DbSet<SYS_UserAssignUnit> SYS_UserAssignUnit { get; set; }
        public virtual DbSet<U_BloodPressure> U_BloodPressure { get; set; }
        public virtual DbSet<U_BloodSugar> U_BloodSugar { get; set; }
        public virtual DbSet<U_BodyWeight> U_BodyWeight { get; set; }
        public virtual DbSet<APPHT_Partner> APPHT_Partner { get; set; }
        public virtual DbSet<APPHT_User> APPHT_User { get; set; }
        public virtual DbSet<CG_Appointment> CG_Appointment { get; set; }
        public virtual DbSet<CG_MeetingRecordHead> CG_MeetingRecordHead { get; set; }
        public virtual DbSet<CG_Message> CG_Message { get; set; }
        public virtual DbSet<CGHT_Appointment> CGHT_Appointment { get; set; }
        public virtual DbSet<CGHT_CareGroup> CGHT_CareGroup { get; set; }
        public virtual DbSet<CGHT_HealthEducation> CGHT_HealthEducation { get; set; }
        public virtual DbSet<CGHT_Message> CGHT_Message { get; set; }
        public virtual DbSet<CGHT_ServiceRecord> CGHT_ServiceRecord { get; set; }
        public virtual DbSet<CMR_ContactPerson> CMR_ContactPerson { get; set; }
        public virtual DbSet<CMRHT_PatientBase> CMRHT_PatientBase { get; set; }
        public virtual DbSet<CMRHT_PatientDetails> CMRHT_PatientDetails { get; set; }
        public virtual DbSet<CMRHT_PatientKey> CMRHT_PatientKey { get; set; }
        public virtual DbSet<PME_ExaminationBody> PME_ExaminationBody { get; set; }
        public virtual DbSet<PMEHT_ExaminationBody> PMEHT_ExaminationBody { get; set; }
        public virtual DbSet<PMEHT_ExaminationHead> PMEHT_ExaminationHead { get; set; }
        public virtual DbSet<PMR_PathologyBody> PMR_PathologyBody { get; set; }
        public virtual DbSet<PMRHT_PathologyBody> PMRHT_PathologyBody { get; set; }
        public virtual DbSet<PMRHT_PathologyHead> PMRHT_PathologyHead { get; set; }
        public virtual DbSet<SYSHT_LoginUser> SYSHT_LoginUser { get; set; }
        public virtual DbSet<SYSHT_Unit> SYSHT_Unit { get; set; }
        public virtual DbSet<SYSHT_UnitDetails> SYSHT_UnitDetails { get; set; }
        public virtual DbSet<SYSHT_UnitRole> SYSHT_UnitRole { get; set; }
        public virtual DbSet<SYSHT_User> SYSHT_User { get; set; }
        public virtual DbSet<SYSHT_UserAssignRole> SYSHT_UserAssignRole { get; set; }
        public virtual DbSet<SYSHT_UserAssignUnit> SYSHT_UserAssignUnit { get; set; }
        public virtual DbSet<U_FoodRecord> U_FoodRecord { get; set; }
        public virtual DbSet<U_MedicineRecord> U_MedicineRecord { get; set; }
        public virtual DbSet<C_APP_卫教讯息> C_APP_卫教讯息 { get; set; }
        public virtual DbSet<C_APP_卫教讯息精选> C_APP_卫教讯息精选 { get; set; }
        public virtual DbSet<C_APP_好友绑定> C_APP_好友绑定 { get; set; }
        public virtual DbSet<C_APP_医事人员APP绑定> C_APP_医事人员APP绑定 { get; set; }
        public virtual DbSet<C_APP_病患APP绑定> C_APP_病患APP绑定 { get; set; }
        public virtual DbSet<C_个案建立_个案与APP绑定验证码> C_个案建立_个案与APP绑定验证码 { get; set; }
        public virtual DbSet<C_个案建立_产生病患ID对应基本以及明细资料> C_个案建立_产生病患ID对应基本以及明细资料 { get; set; }
        public virtual DbSet<C_个案建立_明细资料> C_个案建立_明细资料 { get; set; }
        public virtual DbSet<C_个案建立_基本资料> C_个案建立_基本资料 { get; set; }
        public virtual DbSet<C_关怀群组_关怀服务资料建立> C_关怀群组_关怀服务资料建立 { get; set; }
        public virtual DbSet<C_关怀群组_关怀群组与APP使用者关连图> C_关怀群组_关怀群组与APP使用者关连图 { get; set; }
        public virtual DbSet<C_关怀群组_约定视讯以及状态> C_关怀群组_约定视讯以及状态 { get; set; }
        public virtual DbSet<C_关怀群组_排班表> C_关怀群组_排班表 { get; set; }
        public virtual DbSet<C_权限1_从人员_单位对应到权限与功能> C_权限1_从人员_单位对应到权限与功能 { get; set; }
        public virtual DbSet<C_权限2_从人员对应到权限与功能> C_权限2_从人员对应到权限与功能 { get; set; }
        public virtual DbSet<C_医事人员_指派单位关连图> C_医事人员_指派单位关连图 { get; set; }
        public virtual DbSet<C_医事单位_关连图> C_医事单位_关连图 { get; set; }
        public virtual DbSet<C_病史资料_门诊用药> C_病史资料_门诊用药 { get; set; }
        public virtual DbSet<C_病史资料_病史资料建立> C_病史资料_病史资料建立 { get; set; }
        public virtual DbSet<C_病患建立_家属_联络人> C_病患建立_家属_联络人 { get; set; }
        public virtual DbSet<C_检验资料_检验报告资料建立> C_检验资料_检验报告资料建立 { get; set; }
        public virtual DbSet<C_糖尿病警示_糖尿病测量计画> C_糖尿病警示_糖尿病测量计画 { get; set; }
        public virtual DbSet<C_糖尿病警示_糖尿病警报> C_糖尿病警示_糖尿病警报 { get; set; }
        public virtual DbSet<View_DMCare_BasicInformation> View_DMCare_BasicInformation { get; set; }
        public virtual DbSet<View_DMCare_ContactPerson> View_DMCare_ContactPerson { get; set; }
        public virtual DbSet<View_DMCare_DMCareMember> View_DMCare_DMCareMember { get; set; }
        public virtual DbSet<View_DMCare_PMRPathology> View_DMCare_PMRPathology { get; set; }
        public virtual DbSet<View_DMGroup_DMCaseInfo> View_DMGroup_DMCaseInfo { get; set; }
        public virtual DbSet<View_DMGroup_SYSUser> View_DMGroup_SYSUser { get; set; }
        public virtual DbSet<SYS_UnitAssignRole> SYS_UnitAssignRole { get; set; }
        public virtual DbSet<View_DCCare_ContactPerson> View_DCCare_ContactPerson { get; set; }
    
        [DbFunction("ChronicCareEntities", "FN_GetMeetingRoomsRemainTable")]
        public virtual IQueryable<FN_GetMeetingRoomsRemainTable_Result> FN_GetMeetingRoomsRemainTable(Nullable<System.DateTime> shiftdate)
        {
            var shiftdateParameter = shiftdate.HasValue ?
                new ObjectParameter("shiftdate", shiftdate) :
                new ObjectParameter("shiftdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FN_GetMeetingRoomsRemainTable_Result>("[ChronicCareEntities].[FN_GetMeetingRoomsRemainTable](@shiftdate)", shiftdateParameter);
        }
    
        [DbFunction("ChronicCareEntities", "GetBookingScheduleEvents")]
        public virtual IQueryable<GetBookingScheduleEvents_Result> GetBookingScheduleEvents()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetBookingScheduleEvents_Result>("[ChronicCareEntities].[GetBookingScheduleEvents]()");
        }
    
        [DbFunction("ChronicCareEntities", "GetUnitTreeFull")]
        public virtual IQueryable<GetUnitTreeFull_Result> GetUnitTreeFull(Nullable<int> unitID)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetUnitTreeFull_Result>("[ChronicCareEntities].[GetUnitTreeFull](@UnitID)", unitIDParameter);
        }
    
        [DbFunction("ChronicCareEntities", "GetUnitTreeLower")]
        public virtual IQueryable<GetUnitTreeLower_Result> GetUnitTreeLower(Nullable<int> unitID)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetUnitTreeLower_Result>("[ChronicCareEntities].[GetUnitTreeLower](@UnitID)", unitIDParameter);
        }
    
        [DbFunction("ChronicCareEntities", "GetUnitTreeUpper")]
        public virtual IQueryable<GetUnitTreeUpper_Result> GetUnitTreeUpper(Nullable<int> unitID)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetUnitTreeUpper_Result>("[ChronicCareEntities].[GetUnitTreeUpper](@UnitID)", unitIDParameter);
        }
    
        public virtual int API_Account_ChangePassword(string userKey, string password, string newPassword, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("API_Account_ChangePassword", userKeyParameter, passwordParameter, newPasswordParameter, newUserKey);
        }
    
        public virtual int API_Account_CheckMail(string mailAddress)
        {
            var mailAddressParameter = mailAddress != null ?
                new ObjectParameter("MailAddress", mailAddress) :
                new ObjectParameter("MailAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("API_Account_CheckMail", mailAddressParameter);
        }
    
        public virtual ObjectResult<API_Account_GetChronicSubType_Result> API_Account_GetChronicSubType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_Account_GetChronicSubType_Result>("API_Account_GetChronicSubType");
        }
    
        public virtual ObjectResult<API_Account_GetSexType_Result> API_Account_GetSexType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_Account_GetSexType_Result>("API_Account_GetSexType");
        }
    
        public virtual ObjectResult<API_Account_GetUserInfo_Result> API_Account_GetUserInfo(string userKey, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_Account_GetUserInfo_Result>("API_Account_GetUserInfo", userKeyParameter, newUserKey);
        }
    
        public virtual ObjectResult<Nullable<int>> API_Account_Login(string account, string password, ObjectParameter newUserKey)
        {
            var accountParameter = account != null ?
                new ObjectParameter("Account", account) :
                new ObjectParameter("Account", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("API_Account_Login", accountParameter, passwordParameter, newUserKey);
        }
    
        public virtual int API_Account_Register(string mailAddress, string password, string name, Nullable<int> sexID, Nullable<System.DateTime> birthday, string identityNumber, Nullable<int> chronicSubTypeID, Nullable<System.DateTime> diagnosisDate, Nullable<decimal> bodyHeight, Nullable<decimal> bodyWeight, string mobileNumber, string mobileToken, ObjectParameter newUserKey)
        {
            var mailAddressParameter = mailAddress != null ?
                new ObjectParameter("MailAddress", mailAddress) :
                new ObjectParameter("MailAddress", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sexIDParameter = sexID.HasValue ?
                new ObjectParameter("SexID", sexID) :
                new ObjectParameter("SexID", typeof(int));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            var identityNumberParameter = identityNumber != null ?
                new ObjectParameter("IdentityNumber", identityNumber) :
                new ObjectParameter("IdentityNumber", typeof(string));
    
            var chronicSubTypeIDParameter = chronicSubTypeID.HasValue ?
                new ObjectParameter("ChronicSubTypeID", chronicSubTypeID) :
                new ObjectParameter("ChronicSubTypeID", typeof(int));
    
            var diagnosisDateParameter = diagnosisDate.HasValue ?
                new ObjectParameter("DiagnosisDate", diagnosisDate) :
                new ObjectParameter("DiagnosisDate", typeof(System.DateTime));
    
            var bodyHeightParameter = bodyHeight.HasValue ?
                new ObjectParameter("BodyHeight", bodyHeight) :
                new ObjectParameter("BodyHeight", typeof(decimal));
    
            var bodyWeightParameter = bodyWeight.HasValue ?
                new ObjectParameter("BodyWeight", bodyWeight) :
                new ObjectParameter("BodyWeight", typeof(decimal));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var mobileTokenParameter = mobileToken != null ?
                new ObjectParameter("MobileToken", mobileToken) :
                new ObjectParameter("MobileToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("API_Account_Register", mailAddressParameter, passwordParameter, nameParameter, sexIDParameter, birthdayParameter, identityNumberParameter, chronicSubTypeIDParameter, diagnosisDateParameter, bodyHeightParameter, bodyWeightParameter, mobileNumberParameter, mobileTokenParameter, newUserKey);
        }
    
        public virtual int API_Account_RenewUserKey(string userKey, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("API_Account_RenewUserKey", userKeyParameter, newUserKey);
        }
    
        public virtual int API_Account_UpdatePersonalInfo(string userKey, string name, Nullable<int> sexID, Nullable<System.DateTime> birthday, string identityNumber, Nullable<int> chronicSubTypeID, Nullable<System.DateTime> diagnosisDate, Nullable<decimal> bodyHeight, Nullable<decimal> bodyWeight, string mobileNumber, string mobileToken, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sexIDParameter = sexID.HasValue ?
                new ObjectParameter("SexID", sexID) :
                new ObjectParameter("SexID", typeof(int));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            var identityNumberParameter = identityNumber != null ?
                new ObjectParameter("IdentityNumber", identityNumber) :
                new ObjectParameter("IdentityNumber", typeof(string));
    
            var chronicSubTypeIDParameter = chronicSubTypeID.HasValue ?
                new ObjectParameter("ChronicSubTypeID", chronicSubTypeID) :
                new ObjectParameter("ChronicSubTypeID", typeof(int));
    
            var diagnosisDateParameter = diagnosisDate.HasValue ?
                new ObjectParameter("DiagnosisDate", diagnosisDate) :
                new ObjectParameter("DiagnosisDate", typeof(System.DateTime));
    
            var bodyHeightParameter = bodyHeight.HasValue ?
                new ObjectParameter("BodyHeight", bodyHeight) :
                new ObjectParameter("BodyHeight", typeof(decimal));
    
            var bodyWeightParameter = bodyWeight.HasValue ?
                new ObjectParameter("BodyWeight", bodyWeight) :
                new ObjectParameter("BodyWeight", typeof(decimal));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var mobileTokenParameter = mobileToken != null ?
                new ObjectParameter("MobileToken", mobileToken) :
                new ObjectParameter("MobileToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("API_Account_UpdatePersonalInfo", userKeyParameter, nameParameter, sexIDParameter, birthdayParameter, identityNumberParameter, chronicSubTypeIDParameter, diagnosisDateParameter, bodyHeightParameter, bodyWeightParameter, mobileNumberParameter, mobileTokenParameter, newUserKey);
        }
    
        public virtual int API_Account_VerifyCode(string userKey, string verifyCode, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var verifyCodeParameter = verifyCode != null ?
                new ObjectParameter("VerifyCode", verifyCode) :
                new ObjectParameter("VerifyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("API_Account_VerifyCode", userKeyParameter, verifyCodeParameter, newUserKey);
        }
    
        public virtual int API_Base_RenewUserKey(Nullable<int> userID, ObjectParameter newUserKey)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("API_Base_RenewUserKey", userIDParameter, newUserKey);
        }
    
        public virtual int API_Health_AddFoodRecord(string userKey, Nullable<long> recordID, Nullable<int> foodTypeID, Nullable<decimal> foodValue, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(long));
    
            var foodTypeIDParameter = foodTypeID.HasValue ?
                new ObjectParameter("FoodTypeID", foodTypeID) :
                new ObjectParameter("FoodTypeID", typeof(int));
    
            var foodValueParameter = foodValue.HasValue ?
                new ObjectParameter("FoodValue", foodValue) :
                new ObjectParameter("FoodValue", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("API_Health_AddFoodRecord", userKeyParameter, recordIDParameter, foodTypeIDParameter, foodValueParameter, newUserKey);
        }
    
        public virtual int API_Health_AddMedicineRecord(string userKey, Nullable<long> recordID, Nullable<int> medicineID, Nullable<decimal> medicineValue, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(long));
    
            var medicineIDParameter = medicineID.HasValue ?
                new ObjectParameter("MedicineID", medicineID) :
                new ObjectParameter("MedicineID", typeof(int));
    
            var medicineValueParameter = medicineValue.HasValue ?
                new ObjectParameter("MedicineValue", medicineValue) :
                new ObjectParameter("MedicineValue", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("API_Health_AddMedicineRecord", userKeyParameter, recordIDParameter, medicineIDParameter, medicineValueParameter, newUserKey);
        }
    
        public virtual int API_Health_AddPressureRecord(string userKey, Nullable<System.DateTime> recordTime, Nullable<int> systolic, Nullable<int> diastolic, Nullable<int> heartbeat, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var recordTimeParameter = recordTime.HasValue ?
                new ObjectParameter("RecordTime", recordTime) :
                new ObjectParameter("RecordTime", typeof(System.DateTime));
    
            var systolicParameter = systolic.HasValue ?
                new ObjectParameter("Systolic", systolic) :
                new ObjectParameter("Systolic", typeof(int));
    
            var diastolicParameter = diastolic.HasValue ?
                new ObjectParameter("Diastolic", diastolic) :
                new ObjectParameter("Diastolic", typeof(int));
    
            var heartbeatParameter = heartbeat.HasValue ?
                new ObjectParameter("Heartbeat", heartbeat) :
                new ObjectParameter("Heartbeat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("API_Health_AddPressureRecord", userKeyParameter, recordTimeParameter, systolicParameter, diastolicParameter, heartbeatParameter, newUserKey);
        }
    
        public virtual int API_Health_AddSugarRecord(string userKey, Nullable<System.DateTime> recordTime, Nullable<decimal> resultValue, Nullable<int> timingTypeID, Nullable<int> mealTypeID, string pictrueUrl, string note, ObjectParameter newUserKey, ObjectParameter recordID, ObjectParameter appUserID)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var recordTimeParameter = recordTime.HasValue ?
                new ObjectParameter("RecordTime", recordTime) :
                new ObjectParameter("RecordTime", typeof(System.DateTime));
    
            var resultValueParameter = resultValue.HasValue ?
                new ObjectParameter("ResultValue", resultValue) :
                new ObjectParameter("ResultValue", typeof(decimal));
    
            var timingTypeIDParameter = timingTypeID.HasValue ?
                new ObjectParameter("TimingTypeID", timingTypeID) :
                new ObjectParameter("TimingTypeID", typeof(int));
    
            var mealTypeIDParameter = mealTypeID.HasValue ?
                new ObjectParameter("MealTypeID", mealTypeID) :
                new ObjectParameter("MealTypeID", typeof(int));
    
            var pictrueUrlParameter = pictrueUrl != null ?
                new ObjectParameter("PictrueUrl", pictrueUrl) :
                new ObjectParameter("PictrueUrl", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("API_Health_AddSugarRecord", userKeyParameter, recordTimeParameter, resultValueParameter, timingTypeIDParameter, mealTypeIDParameter, pictrueUrlParameter, noteParameter, newUserKey, recordID, appUserID);
        }
    
        public virtual int API_Health_AddWeightRecord(string userKey, Nullable<System.DateTime> recordTime, Nullable<decimal> bodyWeight, Nullable<decimal> bodyFat, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var recordTimeParameter = recordTime.HasValue ?
                new ObjectParameter("RecordTime", recordTime) :
                new ObjectParameter("RecordTime", typeof(System.DateTime));
    
            var bodyWeightParameter = bodyWeight.HasValue ?
                new ObjectParameter("BodyWeight", bodyWeight) :
                new ObjectParameter("BodyWeight", typeof(decimal));
    
            var bodyFatParameter = bodyFat.HasValue ?
                new ObjectParameter("BodyFat", bodyFat) :
                new ObjectParameter("BodyFat", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("API_Health_AddWeightRecord", userKeyParameter, recordTimeParameter, bodyWeightParameter, bodyFatParameter, newUserKey);
        }
    
        public virtual ObjectResult<API_Health_GetFoodRecord_Result> API_Health_GetFoodRecord(string userKey, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_Health_GetFoodRecord_Result>("API_Health_GetFoodRecord", userKeyParameter, startDateParameter, endDateParameter, newUserKey);
        }
    
        public virtual ObjectResult<API_Health_GetFoodType_Result> API_Health_GetFoodType(string userKey, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_Health_GetFoodType_Result>("API_Health_GetFoodType", userKeyParameter, newUserKey);
        }
    
        public virtual ObjectResult<API_Health_GetMealType_Result> API_Health_GetMealType(string userKey, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_Health_GetMealType_Result>("API_Health_GetMealType", userKeyParameter, newUserKey);
        }
    
        public virtual int API_Health_GetMedicineRecord(string userKey, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("API_Health_GetMedicineRecord", userKeyParameter, startDateParameter, endDateParameter, newUserKey);
        }
    
        public virtual ObjectResult<API_Health_GetMedicineType_Result> API_Health_GetMedicineType(string userKey, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_Health_GetMedicineType_Result>("API_Health_GetMedicineType", userKeyParameter, newUserKey);
        }
    
        public virtual ObjectResult<API_Health_GetPressureRecord_Result> API_Health_GetPressureRecord(string userKey, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_Health_GetPressureRecord_Result>("API_Health_GetPressureRecord", userKeyParameter, startDateParameter, endDateParameter, newUserKey);
        }
    
        public virtual ObjectResult<API_Health_GetSugarRecord_Result> API_Health_GetSugarRecord(string userKey, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_Health_GetSugarRecord_Result>("API_Health_GetSugarRecord", userKeyParameter, startDateParameter, endDateParameter, newUserKey);
        }
    
        public virtual ObjectResult<API_Health_GetTimingType_Result> API_Health_GetTimingType(string userKey, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_Health_GetTimingType_Result>("API_Health_GetTimingType", userKeyParameter, newUserKey);
        }
    
        public virtual ObjectResult<API_Health_GetWeightRecord_Result> API_Health_GetWeightRecord(string userKey, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_Health_GetWeightRecord_Result>("API_Health_GetWeightRecord", userKeyParameter, startDateParameter, endDateParameter, newUserKey);
        }
    
        public virtual int API_Management_GetPatientList(string userKey, string searchName, Nullable<int> pageNumber, Nullable<int> pageLimit, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageLimitParameter = pageLimit.HasValue ?
                new ObjectParameter("PageLimit", pageLimit) :
                new ObjectParameter("PageLimit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("API_Management_GetPatientList", userKeyParameter, searchNameParameter, pageNumberParameter, pageLimitParameter, newUserKey);
        }
    
        public virtual ObjectResult<string> API_Partner_GenerateInviteCode(string userKey, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("API_Partner_GenerateInviteCode", userKeyParameter, newUserKey);
        }
    
        public virtual ObjectResult<API_Partner_GetFoodRecord_Result> API_Partner_GetFoodRecord(string userKey, Nullable<int> partnerID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("PartnerID", partnerID) :
                new ObjectParameter("PartnerID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_Partner_GetFoodRecord_Result>("API_Partner_GetFoodRecord", userKeyParameter, partnerIDParameter, startDateParameter, endDateParameter, newUserKey);
        }
    
        public virtual int API_Partner_GetMedicineRecord(string userKey, Nullable<int> partnerID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("PartnerID", partnerID) :
                new ObjectParameter("PartnerID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("API_Partner_GetMedicineRecord", userKeyParameter, partnerIDParameter, startDateParameter, endDateParameter, newUserKey);
        }
    
        public virtual ObjectResult<API_Partner_GetPartnerList_Result> API_Partner_GetPartnerList(string userKey, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_Partner_GetPartnerList_Result>("API_Partner_GetPartnerList", userKeyParameter, newUserKey);
        }
    
        public virtual ObjectResult<API_Partner_GetPressureRecord_Result> API_Partner_GetPressureRecord(string userKey, Nullable<int> partnerID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("PartnerID", partnerID) :
                new ObjectParameter("PartnerID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_Partner_GetPressureRecord_Result>("API_Partner_GetPressureRecord", userKeyParameter, partnerIDParameter, startDateParameter, endDateParameter, newUserKey);
        }
    
        public virtual ObjectResult<API_Partner_GetSugarRecord_Result> API_Partner_GetSugarRecord(string userKey, Nullable<int> partnerID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("PartnerID", partnerID) :
                new ObjectParameter("PartnerID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_Partner_GetSugarRecord_Result>("API_Partner_GetSugarRecord", userKeyParameter, partnerIDParameter, startDateParameter, endDateParameter, newUserKey);
        }
    
        public virtual ObjectResult<API_Partner_GetWeightRecord_Result> API_Partner_GetWeightRecord(string userKey, Nullable<int> partnerID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("PartnerID", partnerID) :
                new ObjectParameter("PartnerID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_Partner_GetWeightRecord_Result>("API_Partner_GetWeightRecord", userKeyParameter, partnerIDParameter, startDateParameter, endDateParameter, newUserKey);
        }
    
        public virtual int API_Partner_VerifyInviteCode(string userKey, string inviteCode, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var inviteCodeParameter = inviteCode != null ?
                new ObjectParameter("InviteCode", inviteCode) :
                new ObjectParameter("InviteCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("API_Partner_VerifyInviteCode", userKeyParameter, inviteCodeParameter, newUserKey);
        }
    
        public virtual ObjectResult<API_Query_GetExaminationDetails_Result> API_Query_GetExaminationDetails(string userKey, Nullable<long> reportID, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_Query_GetExaminationDetails_Result>("API_Query_GetExaminationDetails", userKeyParameter, reportIDParameter, newUserKey);
        }
    
        public virtual ObjectResult<API_Query_GetExaminationList_Result> API_Query_GetExaminationList(string userKey, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_Query_GetExaminationList_Result>("API_Query_GetExaminationList", userKeyParameter, startDateParameter, endDateParameter, newUserKey);
        }
    
        public virtual ObjectResult<API_Query_GetHealthEducationDetails_Result> API_Query_GetHealthEducationDetails(string userKey, Nullable<int> newsID, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var newsIDParameter = newsID.HasValue ?
                new ObjectParameter("NewsID", newsID) :
                new ObjectParameter("NewsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_Query_GetHealthEducationDetails_Result>("API_Query_GetHealthEducationDetails", userKeyParameter, newsIDParameter, newUserKey);
        }
    
        public virtual ObjectResult<API_Query_GetHealthEducationList_Result> API_Query_GetHealthEducationList(string userKey, string searchName, Nullable<int> pageNumber, Nullable<int> pageLimit, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageLimitParameter = pageLimit.HasValue ?
                new ObjectParameter("PageLimit", pageLimit) :
                new ObjectParameter("PageLimit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_Query_GetHealthEducationList_Result>("API_Query_GetHealthEducationList", userKeyParameter, searchNameParameter, pageNumberParameter, pageLimitParameter, newUserKey);
        }
    
        public virtual ObjectResult<API_Query_GetPathologyDetails_Result> API_Query_GetPathologyDetails(string userKey, Nullable<long> reportID, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_Query_GetPathologyDetails_Result>("API_Query_GetPathologyDetails", userKeyParameter, reportIDParameter, newUserKey);
        }
    
        public virtual ObjectResult<API_Query_GetPathologyList_Result> API_Query_GetPathologyList(string userKey, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_Query_GetPathologyList_Result>("API_Query_GetPathologyList", userKeyParameter, startDateParameter, endDateParameter, newUserKey);
        }
    
        public virtual int API_Service_AddAppointment(string userKey, Nullable<System.DateTime> targetTime, Nullable<int> cGUnitID, Nullable<int> appointmentUserID, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var targetTimeParameter = targetTime.HasValue ?
                new ObjectParameter("TargetTime", targetTime) :
                new ObjectParameter("TargetTime", typeof(System.DateTime));
    
            var cGUnitIDParameter = cGUnitID.HasValue ?
                new ObjectParameter("CGUnitID", cGUnitID) :
                new ObjectParameter("CGUnitID", typeof(int));
    
            var appointmentUserIDParameter = appointmentUserID.HasValue ?
                new ObjectParameter("AppointmentUserID", appointmentUserID) :
                new ObjectParameter("AppointmentUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("API_Service_AddAppointment", userKeyParameter, targetTimeParameter, cGUnitIDParameter, appointmentUserIDParameter, newUserKey);
        }
    
        public virtual int API_Service_AddAppointment_20160924(string userKey, Nullable<System.DateTime> targetTime, Nullable<int> appointmentID, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var targetTimeParameter = targetTime.HasValue ?
                new ObjectParameter("TargetTime", targetTime) :
                new ObjectParameter("TargetTime", typeof(System.DateTime));
    
            var appointmentIDParameter = appointmentID.HasValue ?
                new ObjectParameter("AppointmentID", appointmentID) :
                new ObjectParameter("AppointmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("API_Service_AddAppointment_20160924", userKeyParameter, targetTimeParameter, appointmentIDParameter, newUserKey);
        }
    
        public virtual ObjectResult<API_Service_GetDateList_Result> API_Service_GetDateList(string userKey, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_Service_GetDateList_Result>("API_Service_GetDateList", userKeyParameter, newUserKey);
        }
    
        public virtual ObjectResult<API_Service_GetDateList_20160924_Result> API_Service_GetDateList_20160924(string userKey, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_Service_GetDateList_20160924_Result>("API_Service_GetDateList_20160924", userKeyParameter, newUserKey);
        }
    
        public virtual ObjectResult<API_Service_GetTimeList_Result> API_Service_GetTimeList(string userKey, Nullable<System.DateTime> targetDate, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var targetDateParameter = targetDate.HasValue ?
                new ObjectParameter("TargetDate", targetDate) :
                new ObjectParameter("TargetDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_Service_GetTimeList_Result>("API_Service_GetTimeList", userKeyParameter, targetDateParameter, newUserKey);
        }
    
        public virtual ObjectResult<API_Service_GetTimeList_20160924_Result> API_Service_GetTimeList_20160924(string userKey, Nullable<System.DateTime> targetDate, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var targetDateParameter = targetDate.HasValue ?
                new ObjectParameter("TargetDate", targetDate) :
                new ObjectParameter("TargetDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_Service_GetTimeList_20160924_Result>("API_Service_GetTimeList_20160924", userKeyParameter, targetDateParameter, newUserKey);
        }
    
        public virtual ObjectResult<API_Service_GetUnit_Result> API_Service_GetUnit(string userKey, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_Service_GetUnit_Result>("API_Service_GetUnit", userKeyParameter, newUserKey);
        }
    
        public virtual ObjectResult<API_Service_GetUnit_20160924_Result> API_Service_GetUnit_20160924(string userKey, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<API_Service_GetUnit_20160924_Result>("API_Service_GetUnit_20160924", userKeyParameter, newUserKey);
        }
    
        public virtual int API_Service_SendMessage(string userKey, Nullable<int> cGUnitID, string message, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var cGUnitIDParameter = cGUnitID.HasValue ?
                new ObjectParameter("CGUnitID", cGUnitID) :
                new ObjectParameter("CGUnitID", typeof(int));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("API_Service_SendMessage", userKeyParameter, cGUnitIDParameter, messageParameter, newUserKey);
        }
    
        public virtual int API_Service_SendMessage_20160924(string userKey, string message, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("API_Service_SendMessage_20160924", userKeyParameter, messageParameter, newUserKey);
        }
    
        public virtual ObjectResult<SP_AddCG_WorkShift_Result> SP_AddCG_WorkShift(Nullable<int> userid, Nullable<System.DateTime> shiftdate, Nullable<System.TimeSpan> starttime, Nullable<System.TimeSpan> endtime, Nullable<int> dayofweek, Nullable<int> limitNumber)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var shiftdateParameter = shiftdate.HasValue ?
                new ObjectParameter("shiftdate", shiftdate) :
                new ObjectParameter("shiftdate", typeof(System.DateTime));
    
            var starttimeParameter = starttime.HasValue ?
                new ObjectParameter("starttime", starttime) :
                new ObjectParameter("starttime", typeof(System.TimeSpan));
    
            var endtimeParameter = endtime.HasValue ?
                new ObjectParameter("endtime", endtime) :
                new ObjectParameter("endtime", typeof(System.TimeSpan));
    
            var dayofweekParameter = dayofweek.HasValue ?
                new ObjectParameter("dayofweek", dayofweek) :
                new ObjectParameter("dayofweek", typeof(int));
    
            var limitNumberParameter = limitNumber.HasValue ?
                new ObjectParameter("LimitNumber", limitNumber) :
                new ObjectParameter("LimitNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_AddCG_WorkShift_Result>("SP_AddCG_WorkShift", useridParameter, shiftdateParameter, starttimeParameter, endtimeParameter, dayofweekParameter, limitNumberParameter);
        }
    
        public virtual ObjectResult<SP_AddCG_WorkShiftBase_Result> SP_AddCG_WorkShiftBase(Nullable<int> userid, Nullable<int> dayofweek, Nullable<System.TimeSpan> starttime, Nullable<System.TimeSpan> endtime, Nullable<int> limitnumber, Nullable<System.DateTime> fixdwdate)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var dayofweekParameter = dayofweek.HasValue ?
                new ObjectParameter("dayofweek", dayofweek) :
                new ObjectParameter("dayofweek", typeof(int));
    
            var starttimeParameter = starttime.HasValue ?
                new ObjectParameter("starttime", starttime) :
                new ObjectParameter("starttime", typeof(System.TimeSpan));
    
            var endtimeParameter = endtime.HasValue ?
                new ObjectParameter("endtime", endtime) :
                new ObjectParameter("endtime", typeof(System.TimeSpan));
    
            var limitnumberParameter = limitnumber.HasValue ?
                new ObjectParameter("limitnumber", limitnumber) :
                new ObjectParameter("limitnumber", typeof(int));
    
            var fixdwdateParameter = fixdwdate.HasValue ?
                new ObjectParameter("fixdwdate", fixdwdate) :
                new ObjectParameter("fixdwdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_AddCG_WorkShiftBase_Result>("SP_AddCG_WorkShiftBase", useridParameter, dayofweekParameter, starttimeParameter, endtimeParameter, limitnumberParameter, fixdwdateParameter);
        }
    
        public virtual ObjectResult<SP_AddMR_MeetingRoomAssigned_Result> SP_AddMR_MeetingRoomAssigned(Nullable<int> roomid, Nullable<int> timeid, Nullable<int> userid, Nullable<System.DateTime> shiftdate)
        {
            var roomidParameter = roomid.HasValue ?
                new ObjectParameter("roomid", roomid) :
                new ObjectParameter("roomid", typeof(int));
    
            var timeidParameter = timeid.HasValue ?
                new ObjectParameter("timeid", timeid) :
                new ObjectParameter("timeid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var shiftdateParameter = shiftdate.HasValue ?
                new ObjectParameter("shiftdate", shiftdate) :
                new ObjectParameter("shiftdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_AddMR_MeetingRoomAssigned_Result>("SP_AddMR_MeetingRoomAssigned", roomidParameter, timeidParameter, useridParameter, shiftdateParameter);
        }
    
        public virtual ObjectResult<SP_AddMR_MeetingRooms_Result> SP_AddMR_MeetingRooms(string roomname)
        {
            var roomnameParameter = roomname != null ?
                new ObjectParameter("roomname", roomname) :
                new ObjectParameter("roomname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_AddMR_MeetingRooms_Result>("SP_AddMR_MeetingRooms", roomnameParameter);
        }
    
        public virtual ObjectResult<SP_AddMR_MeetingRoomTime_Result> SP_AddMR_MeetingRoomTime(Nullable<System.TimeSpan> starttime, Nullable<System.TimeSpan> endtime)
        {
            var starttimeParameter = starttime.HasValue ?
                new ObjectParameter("starttime", starttime) :
                new ObjectParameter("starttime", typeof(System.TimeSpan));
    
            var endtimeParameter = endtime.HasValue ?
                new ObjectParameter("endtime", endtime) :
                new ObjectParameter("endtime", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_AddMR_MeetingRoomTime_Result>("SP_AddMR_MeetingRoomTime", starttimeParameter, endtimeParameter);
        }
    
        public virtual ObjectResult<SP_AddMR_MeetingRoomTimeAssigened_Result> SP_AddMR_MeetingRoomTimeAssigened(Nullable<int> roomid, Nullable<int> timeSectionId, Nullable<int> dayofWeek, Nullable<System.DateTime> fixdwdate)
        {
            var roomidParameter = roomid.HasValue ?
                new ObjectParameter("roomid", roomid) :
                new ObjectParameter("roomid", typeof(int));
    
            var timeSectionIdParameter = timeSectionId.HasValue ?
                new ObjectParameter("TimeSectionId", timeSectionId) :
                new ObjectParameter("TimeSectionId", typeof(int));
    
            var dayofWeekParameter = dayofWeek.HasValue ?
                new ObjectParameter("DayofWeek", dayofWeek) :
                new ObjectParameter("DayofWeek", typeof(int));
    
            var fixdwdateParameter = fixdwdate.HasValue ?
                new ObjectParameter("fixdwdate", fixdwdate) :
                new ObjectParameter("fixdwdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_AddMR_MeetingRoomTimeAssigened_Result>("SP_AddMR_MeetingRoomTimeAssigened", roomidParameter, timeSectionIdParameter, dayofWeekParameter, fixdwdateParameter);
        }
    
        public virtual int SP_AddMR_ZoomMeetings(string id, string uuid, string host_id, string topic, Nullable<int> type, Nullable<int> userid, Nullable<System.DateTime> created_at, string start_url, string join_url, Nullable<System.DateTime> start_time, string timezone, string password, Nullable<int> duration, Nullable<bool> option_jbh, string option_start_type, Nullable<bool> option_host_video, Nullable<bool> option_participants_video, string option_audio)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var uuidParameter = uuid != null ?
                new ObjectParameter("uuid", uuid) :
                new ObjectParameter("uuid", typeof(string));
    
            var host_idParameter = host_id != null ?
                new ObjectParameter("host_id", host_id) :
                new ObjectParameter("host_id", typeof(string));
    
            var topicParameter = topic != null ?
                new ObjectParameter("topic", topic) :
                new ObjectParameter("topic", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var created_atParameter = created_at.HasValue ?
                new ObjectParameter("created_at", created_at) :
                new ObjectParameter("created_at", typeof(System.DateTime));
    
            var start_urlParameter = start_url != null ?
                new ObjectParameter("start_url", start_url) :
                new ObjectParameter("start_url", typeof(string));
    
            var join_urlParameter = join_url != null ?
                new ObjectParameter("join_url", join_url) :
                new ObjectParameter("join_url", typeof(string));
    
            var start_timeParameter = start_time.HasValue ?
                new ObjectParameter("start_time", start_time) :
                new ObjectParameter("start_time", typeof(System.DateTime));
    
            var timezoneParameter = timezone != null ?
                new ObjectParameter("timezone", timezone) :
                new ObjectParameter("timezone", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("duration", duration) :
                new ObjectParameter("duration", typeof(int));
    
            var option_jbhParameter = option_jbh.HasValue ?
                new ObjectParameter("option_jbh", option_jbh) :
                new ObjectParameter("option_jbh", typeof(bool));
    
            var option_start_typeParameter = option_start_type != null ?
                new ObjectParameter("option_start_type", option_start_type) :
                new ObjectParameter("option_start_type", typeof(string));
    
            var option_host_videoParameter = option_host_video.HasValue ?
                new ObjectParameter("option_host_video", option_host_video) :
                new ObjectParameter("option_host_video", typeof(bool));
    
            var option_participants_videoParameter = option_participants_video.HasValue ?
                new ObjectParameter("option_participants_video", option_participants_video) :
                new ObjectParameter("option_participants_video", typeof(bool));
    
            var option_audioParameter = option_audio != null ?
                new ObjectParameter("option_audio", option_audio) :
                new ObjectParameter("option_audio", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddMR_ZoomMeetings", idParameter, uuidParameter, host_idParameter, topicParameter, typeParameter, useridParameter, created_atParameter, start_urlParameter, join_urlParameter, start_timeParameter, timezoneParameter, passwordParameter, durationParameter, option_jbhParameter, option_start_typeParameter, option_host_videoParameter, option_participants_videoParameter, option_audioParameter);
        }
    
        public virtual ObjectResult<SP_AddSYS_Holiday_Result> SP_AddSYS_Holiday(Nullable<System.DateTime> holidayDate, string desc, Nullable<bool> isHoliday)
        {
            var holidayDateParameter = holidayDate.HasValue ?
                new ObjectParameter("HolidayDate", holidayDate) :
                new ObjectParameter("HolidayDate", typeof(System.DateTime));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            var isHolidayParameter = isHoliday.HasValue ?
                new ObjectParameter("IsHoliday", isHoliday) :
                new ObjectParameter("IsHoliday", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_AddSYS_Holiday_Result>("SP_AddSYS_Holiday", holidayDateParameter, descParameter, isHolidayParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int SP_DeleteCG_WorkShift(Nullable<int> userid, Nullable<System.DateTime> shiftdate, Nullable<System.TimeSpan> starttime)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var shiftdateParameter = shiftdate.HasValue ?
                new ObjectParameter("shiftdate", shiftdate) :
                new ObjectParameter("shiftdate", typeof(System.DateTime));
    
            var starttimeParameter = starttime.HasValue ?
                new ObjectParameter("starttime", starttime) :
                new ObjectParameter("starttime", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteCG_WorkShift", useridParameter, shiftdateParameter, starttimeParameter);
        }
    
        public virtual int SP_DeleteMR_MeetingRoomAssigned(Nullable<int> room_Id, string uuid, string meeting_id, Nullable<int> timeSectionId, Nullable<System.DateTime> workShitfDate, Nullable<int> userId)
        {
            var room_IdParameter = room_Id.HasValue ?
                new ObjectParameter("room_Id", room_Id) :
                new ObjectParameter("room_Id", typeof(int));
    
            var uuidParameter = uuid != null ?
                new ObjectParameter("uuid", uuid) :
                new ObjectParameter("uuid", typeof(string));
    
            var meeting_idParameter = meeting_id != null ?
                new ObjectParameter("meeting_id", meeting_id) :
                new ObjectParameter("meeting_id", typeof(string));
    
            var timeSectionIdParameter = timeSectionId.HasValue ?
                new ObjectParameter("TimeSectionId", timeSectionId) :
                new ObjectParameter("TimeSectionId", typeof(int));
    
            var workShitfDateParameter = workShitfDate.HasValue ?
                new ObjectParameter("WorkShitfDate", workShitfDate) :
                new ObjectParameter("WorkShitfDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteMR_MeetingRoomAssigned", room_IdParameter, uuidParameter, meeting_idParameter, timeSectionIdParameter, workShitfDateParameter, userIdParameter);
        }
    
        public virtual int SP_DeleteMR_MeetingRooms(Nullable<int> roomid)
        {
            var roomidParameter = roomid.HasValue ?
                new ObjectParameter("roomid", roomid) :
                new ObjectParameter("roomid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteMR_MeetingRooms", roomidParameter);
        }
    
        public virtual int SP_DeleteMR_MeetingRoomTime(Nullable<int> timespanid)
        {
            var timespanidParameter = timespanid.HasValue ?
                new ObjectParameter("timespanid", timespanid) :
                new ObjectParameter("timespanid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteMR_MeetingRoomTime", timespanidParameter);
        }
    
        public virtual int SP_DeleteMR_MeetingRoomTimeAssigened(Nullable<int> roomid, Nullable<int> timeSectionId, Nullable<int> dayofWeek, Nullable<System.DateTime> fixdwdate)
        {
            var roomidParameter = roomid.HasValue ?
                new ObjectParameter("roomid", roomid) :
                new ObjectParameter("roomid", typeof(int));
    
            var timeSectionIdParameter = timeSectionId.HasValue ?
                new ObjectParameter("TimeSectionId", timeSectionId) :
                new ObjectParameter("TimeSectionId", typeof(int));
    
            var dayofWeekParameter = dayofWeek.HasValue ?
                new ObjectParameter("DayofWeek", dayofWeek) :
                new ObjectParameter("DayofWeek", typeof(int));
    
            var fixdwdateParameter = fixdwdate.HasValue ?
                new ObjectParameter("fixdwdate", fixdwdate) :
                new ObjectParameter("fixdwdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteMR_MeetingRoomTimeAssigened", roomidParameter, timeSectionIdParameter, dayofWeekParameter, fixdwdateParameter);
        }
    
        public virtual int SP_DeleteMR_ZoomMeetings(string id, string uuid, string host_id, Nullable<int> userid)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var uuidParameter = uuid != null ?
                new ObjectParameter("uuid", uuid) :
                new ObjectParameter("uuid", typeof(string));
    
            var host_idParameter = host_id != null ?
                new ObjectParameter("host_id", host_id) :
                new ObjectParameter("host_id", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteMR_ZoomMeetings", idParameter, uuidParameter, host_idParameter, useridParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<SP_GetAllMR_MeetingRooms_Result> SP_GetAllMR_MeetingRooms()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllMR_MeetingRooms_Result>("SP_GetAllMR_MeetingRooms");
        }
    
        public virtual ObjectResult<SP_GetAllMR_MeetingRoomTimeAssigened_Result> SP_GetAllMR_MeetingRoomTimeAssigened()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllMR_MeetingRoomTimeAssigened_Result>("SP_GetAllMR_MeetingRoomTimeAssigened");
        }
    
        public virtual ObjectResult<SP_GetAllMR_MeetingRoomTimes_Result> SP_GetAllMR_MeetingRoomTimes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllMR_MeetingRoomTimes_Result>("SP_GetAllMR_MeetingRoomTimes");
        }
    
        public virtual ObjectResult<SP_GetAllMR_ZoomMeetings_Result> SP_GetAllMR_ZoomMeetings()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllMR_ZoomMeetings_Result>("SP_GetAllMR_ZoomMeetings");
        }
    
        public virtual ObjectResult<SP_GetCG_HealthEducation_Result> SP_GetCG_HealthEducation(Nullable<int> newsID, string userKey, string iP, ObjectParameter newUserKey)
        {
            var newsIDParameter = newsID.HasValue ?
                new ObjectParameter("NewsID", newsID) :
                new ObjectParameter("NewsID", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCG_HealthEducation_Result>("SP_GetCG_HealthEducation", newsIDParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<SP_GetCG_HealthEducationList_Result> SP_GetCG_HealthEducationList(string userKey, string iP, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCG_HealthEducationList_Result>("SP_GetCG_HealthEducationList", userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<SP_GetMR_MeetingRooms_Result> SP_GetMR_MeetingRooms(Nullable<int> roomid)
        {
            var roomidParameter = roomid.HasValue ?
                new ObjectParameter("roomid", roomid) :
                new ObjectParameter("roomid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetMR_MeetingRooms_Result>("SP_GetMR_MeetingRooms", roomidParameter);
        }
    
        public virtual ObjectResult<SP_GetMR_MeetingRoomTimeAssigened_Result> SP_GetMR_MeetingRoomTimeAssigened(Nullable<int> roomid)
        {
            var roomidParameter = roomid.HasValue ?
                new ObjectParameter("roomid", roomid) :
                new ObjectParameter("roomid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetMR_MeetingRoomTimeAssigened_Result>("SP_GetMR_MeetingRoomTimeAssigened", roomidParameter);
        }
    
        public virtual ObjectResult<SP_GetMR_ZoomMeetings_Result> SP_GetMR_ZoomMeetings(Nullable<int> userid, Nullable<System.DateTime> starttime)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var starttimeParameter = starttime.HasValue ?
                new ObjectParameter("starttime", starttime) :
                new ObjectParameter("starttime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetMR_ZoomMeetings_Result>("SP_GetMR_ZoomMeetings", useridParameter, starttimeParameter);
        }
    
        public virtual int SP_GetPermissionByID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetPermissionByID", userIDParameter);
        }
    
        public virtual int SP_GetPermissionByKey(string loginUserKey)
        {
            var loginUserKeyParameter = loginUserKey != null ?
                new ObjectParameter("LoginUserKey", loginUserKey) :
                new ObjectParameter("LoginUserKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetPermissionByKey", loginUserKeyParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int SP_UnitAssignRole(Nullable<int> unitID, Nullable<int> roleID, string loginUserKey)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var loginUserKeyParameter = loginUserKey != null ?
                new ObjectParameter("LoginUserKey", loginUserKey) :
                new ObjectParameter("LoginUserKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UnitAssignRole", unitIDParameter, roleIDParameter, loginUserKeyParameter);
        }
    
        public virtual int SP_UnitRemoveRole(Nullable<int> unitID, Nullable<int> roleID, string loginUserKey)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var loginUserKeyParameter = loginUserKey != null ?
                new ObjectParameter("LoginUserKey", loginUserKey) :
                new ObjectParameter("LoginUserKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UnitRemoveRole", unitIDParameter, roleIDParameter, loginUserKeyParameter);
        }
    
        public virtual int SP_UpdateCG_HealthEducation(Nullable<int> newsID, Nullable<int> newsType, Nullable<System.DateTime> publishDate, Nullable<System.DateTime> endDate, string title, string smallPictureUrl, string subTitle, string htmlBody, Nullable<bool> enable, string userKey, string iP, ObjectParameter newUserKey)
        {
            var newsIDParameter = newsID.HasValue ?
                new ObjectParameter("NewsID", newsID) :
                new ObjectParameter("NewsID", typeof(int));
    
            var newsTypeParameter = newsType.HasValue ?
                new ObjectParameter("NewsType", newsType) :
                new ObjectParameter("NewsType", typeof(int));
    
            var publishDateParameter = publishDate.HasValue ?
                new ObjectParameter("PublishDate", publishDate) :
                new ObjectParameter("PublishDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var smallPictureUrlParameter = smallPictureUrl != null ?
                new ObjectParameter("SmallPictureUrl", smallPictureUrl) :
                new ObjectParameter("SmallPictureUrl", typeof(string));
    
            var subTitleParameter = subTitle != null ?
                new ObjectParameter("SubTitle", subTitle) :
                new ObjectParameter("SubTitle", typeof(string));
    
            var htmlBodyParameter = htmlBody != null ?
                new ObjectParameter("HtmlBody", htmlBody) :
                new ObjectParameter("HtmlBody", typeof(string));
    
            var enableParameter = enable.HasValue ?
                new ObjectParameter("Enable", enable) :
                new ObjectParameter("Enable", typeof(bool));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateCG_HealthEducation", newsIDParameter, newsTypeParameter, publishDateParameter, endDateParameter, titleParameter, smallPictureUrlParameter, subTitleParameter, htmlBodyParameter, enableParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<SP_UpdateMR_MeetingRooms_Result> SP_UpdateMR_MeetingRooms(Nullable<int> roomid, string newname)
        {
            var roomidParameter = roomid.HasValue ?
                new ObjectParameter("roomid", roomid) :
                new ObjectParameter("roomid", typeof(int));
    
            var newnameParameter = newname != null ?
                new ObjectParameter("newname", newname) :
                new ObjectParameter("newname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UpdateMR_MeetingRooms_Result>("SP_UpdateMR_MeetingRooms", roomidParameter, newnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int SP_UserAssignRole(Nullable<int> userID, Nullable<int> roleID, string loginUserKey)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var loginUserKeyParameter = loginUserKey != null ?
                new ObjectParameter("LoginUserKey", loginUserKey) :
                new ObjectParameter("LoginUserKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserAssignRole", userIDParameter, roleIDParameter, loginUserKeyParameter);
        }
    
        public virtual int SP_UserAssignUnit(Nullable<int> userID, Nullable<int> unitID, string userKey, string iP, ObjectParameter newUserKey)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserAssignUnit", userIDParameter, unitIDParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual int SP_UserCreate(Nullable<int> parentUnitID, string account, string password, string name, string identityNumber, string jobTitle, Nullable<System.DateTime> birthday, Nullable<int> sexID, Nullable<int> raceTypeID, Nullable<int> languageTypeID, Nullable<int> countryID, Nullable<int> stateID, Nullable<int> cityID, Nullable<int> districtID, string address, string homeTelphone, string officeTelphone, string cellPhone, string eMail, string mobileToken, ObjectParameter userID, string userKey, string iP, ObjectParameter newUserKey)
        {
            var parentUnitIDParameter = parentUnitID.HasValue ?
                new ObjectParameter("ParentUnitID", parentUnitID) :
                new ObjectParameter("ParentUnitID", typeof(int));
    
            var accountParameter = account != null ?
                new ObjectParameter("Account", account) :
                new ObjectParameter("Account", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var identityNumberParameter = identityNumber != null ?
                new ObjectParameter("IdentityNumber", identityNumber) :
                new ObjectParameter("IdentityNumber", typeof(string));
    
            var jobTitleParameter = jobTitle != null ?
                new ObjectParameter("JobTitle", jobTitle) :
                new ObjectParameter("JobTitle", typeof(string));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            var sexIDParameter = sexID.HasValue ?
                new ObjectParameter("SexID", sexID) :
                new ObjectParameter("SexID", typeof(int));
    
            var raceTypeIDParameter = raceTypeID.HasValue ?
                new ObjectParameter("RaceTypeID", raceTypeID) :
                new ObjectParameter("RaceTypeID", typeof(int));
    
            var languageTypeIDParameter = languageTypeID.HasValue ?
                new ObjectParameter("LanguageTypeID", languageTypeID) :
                new ObjectParameter("LanguageTypeID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var homeTelphoneParameter = homeTelphone != null ?
                new ObjectParameter("HomeTelphone", homeTelphone) :
                new ObjectParameter("HomeTelphone", typeof(string));
    
            var officeTelphoneParameter = officeTelphone != null ?
                new ObjectParameter("OfficeTelphone", officeTelphone) :
                new ObjectParameter("OfficeTelphone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var eMailParameter = eMail != null ?
                new ObjectParameter("eMail", eMail) :
                new ObjectParameter("eMail", typeof(string));
    
            var mobileTokenParameter = mobileToken != null ?
                new ObjectParameter("MobileToken", mobileToken) :
                new ObjectParameter("MobileToken", typeof(string));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserCreate", parentUnitIDParameter, accountParameter, passwordParameter, nameParameter, identityNumberParameter, jobTitleParameter, birthdayParameter, sexIDParameter, raceTypeIDParameter, languageTypeIDParameter, countryIDParameter, stateIDParameter, cityIDParameter, districtIDParameter, addressParameter, homeTelphoneParameter, officeTelphoneParameter, cellPhoneParameter, eMailParameter, mobileTokenParameter, userID, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual int SP_UserEdit(string password, string name, string identityNumber, string jobTitle, Nullable<System.DateTime> birthday, Nullable<int> sexID, Nullable<int> raceTypeID, Nullable<int> languageTypeID, Nullable<int> countryID, Nullable<int> stateID, Nullable<int> cityID, Nullable<int> districtID, string address, string homeTelphone, string officeTelphone, string cellPhone, string eMail, string mobileToken, Nullable<int> userID, string userKey, string iP, ObjectParameter newUserKey)
        {
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var identityNumberParameter = identityNumber != null ?
                new ObjectParameter("IdentityNumber", identityNumber) :
                new ObjectParameter("IdentityNumber", typeof(string));
    
            var jobTitleParameter = jobTitle != null ?
                new ObjectParameter("JobTitle", jobTitle) :
                new ObjectParameter("JobTitle", typeof(string));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            var sexIDParameter = sexID.HasValue ?
                new ObjectParameter("SexID", sexID) :
                new ObjectParameter("SexID", typeof(int));
    
            var raceTypeIDParameter = raceTypeID.HasValue ?
                new ObjectParameter("RaceTypeID", raceTypeID) :
                new ObjectParameter("RaceTypeID", typeof(int));
    
            var languageTypeIDParameter = languageTypeID.HasValue ?
                new ObjectParameter("LanguageTypeID", languageTypeID) :
                new ObjectParameter("LanguageTypeID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var homeTelphoneParameter = homeTelphone != null ?
                new ObjectParameter("HomeTelphone", homeTelphone) :
                new ObjectParameter("HomeTelphone", typeof(string));
    
            var officeTelphoneParameter = officeTelphone != null ?
                new ObjectParameter("OfficeTelphone", officeTelphone) :
                new ObjectParameter("OfficeTelphone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var eMailParameter = eMail != null ?
                new ObjectParameter("eMail", eMail) :
                new ObjectParameter("eMail", typeof(string));
    
            var mobileTokenParameter = mobileToken != null ?
                new ObjectParameter("MobileToken", mobileToken) :
                new ObjectParameter("MobileToken", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserEdit", passwordParameter, nameParameter, identityNumberParameter, jobTitleParameter, birthdayParameter, sexIDParameter, raceTypeIDParameter, languageTypeIDParameter, countryIDParameter, stateIDParameter, cityIDParameter, districtIDParameter, addressParameter, homeTelphoneParameter, officeTelphoneParameter, cellPhoneParameter, eMailParameter, mobileTokenParameter, userIDParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual int SP_UserEnable(Nullable<int> userID, Nullable<bool> enable, string userKey, string iP, ObjectParameter newUserKey)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var enableParameter = enable.HasValue ?
                new ObjectParameter("Enable", enable) :
                new ObjectParameter("Enable", typeof(bool));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserEnable", userIDParameter, enableParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual int SP_UserGetNewKey(string oldUserKey, string iP, ObjectParameter newUserKey)
        {
            var oldUserKeyParameter = oldUserKey != null ?
                new ObjectParameter("OldUserKey", oldUserKey) :
                new ObjectParameter("OldUserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserGetNewKey", oldUserKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual int SP_UserLogin(Nullable<int> unitID, string account, string password, string iP, ObjectParameter userKey)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var accountParameter = account != null ?
                new ObjectParameter("Account", account) :
                new ObjectParameter("Account", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserLogin", unitIDParameter, accountParameter, passwordParameter, iPParameter, userKey);
        }
    
        public virtual int SP_UserLoginDebug(Nullable<int> unitID, string account, string password, string iP, ObjectParameter userKey)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var accountParameter = account != null ?
                new ObjectParameter("Account", account) :
                new ObjectParameter("Account", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserLoginDebug", unitIDParameter, accountParameter, passwordParameter, iPParameter, userKey);
        }
    
        public virtual int SP_UserRemove(Nullable<int> userID, string userKey, string iP, ObjectParameter newUserKey)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserRemove", userIDParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual int SP_UserRemoveRole(Nullable<int> userID, Nullable<int> roleID, string loginUserKey)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var loginUserKeyParameter = loginUserKey != null ?
                new ObjectParameter("LoginUserKey", loginUserKey) :
                new ObjectParameter("LoginUserKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserRemoveRole", userIDParameter, roleIDParameter, loginUserKeyParameter);
        }
    
        public virtual int SP_UserRemoveUnit(Nullable<int> userID, Nullable<int> unitID, string userKey, string iP, ObjectParameter newUserKey)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserRemoveUnit", userIDParameter, unitIDParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual int SP_UserUpdate(string account, string password, string name, string identityNumber, Nullable<System.DateTime> birthday, Nullable<int> sexID, Nullable<int> raceTypeID, Nullable<int> languageTypeID, Nullable<int> countryID, Nullable<int> stateID, Nullable<int> cityID, Nullable<int> districtID, string address, string homeTelphone, string officeTelphone, string cellPhone, string eMail, string mobileToken, Nullable<bool> enable, Nullable<System.DateTime> verifyDate, Nullable<int> userID, string loginUserKey)
        {
            var accountParameter = account != null ?
                new ObjectParameter("Account", account) :
                new ObjectParameter("Account", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var identityNumberParameter = identityNumber != null ?
                new ObjectParameter("IdentityNumber", identityNumber) :
                new ObjectParameter("IdentityNumber", typeof(string));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            var sexIDParameter = sexID.HasValue ?
                new ObjectParameter("SexID", sexID) :
                new ObjectParameter("SexID", typeof(int));
    
            var raceTypeIDParameter = raceTypeID.HasValue ?
                new ObjectParameter("RaceTypeID", raceTypeID) :
                new ObjectParameter("RaceTypeID", typeof(int));
    
            var languageTypeIDParameter = languageTypeID.HasValue ?
                new ObjectParameter("LanguageTypeID", languageTypeID) :
                new ObjectParameter("LanguageTypeID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var homeTelphoneParameter = homeTelphone != null ?
                new ObjectParameter("HomeTelphone", homeTelphone) :
                new ObjectParameter("HomeTelphone", typeof(string));
    
            var officeTelphoneParameter = officeTelphone != null ?
                new ObjectParameter("OfficeTelphone", officeTelphone) :
                new ObjectParameter("OfficeTelphone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var eMailParameter = eMail != null ?
                new ObjectParameter("eMail", eMail) :
                new ObjectParameter("eMail", typeof(string));
    
            var mobileTokenParameter = mobileToken != null ?
                new ObjectParameter("MobileToken", mobileToken) :
                new ObjectParameter("MobileToken", typeof(string));
    
            var enableParameter = enable.HasValue ?
                new ObjectParameter("Enable", enable) :
                new ObjectParameter("Enable", typeof(bool));
    
            var verifyDateParameter = verifyDate.HasValue ?
                new ObjectParameter("VerifyDate", verifyDate) :
                new ObjectParameter("VerifyDate", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var loginUserKeyParameter = loginUserKey != null ?
                new ObjectParameter("LoginUserKey", loginUserKey) :
                new ObjectParameter("LoginUserKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserUpdate", accountParameter, passwordParameter, nameParameter, identityNumberParameter, birthdayParameter, sexIDParameter, raceTypeIDParameter, languageTypeIDParameter, countryIDParameter, stateIDParameter, cityIDParameter, districtIDParameter, addressParameter, homeTelphoneParameter, officeTelphoneParameter, cellPhoneParameter, eMailParameter, mobileTokenParameter, enableParameter, verifyDateParameter, userIDParameter, loginUserKeyParameter);
        }
    
        public virtual ObjectResult<SYS_SearchWordInSP_Result> SYS_SearchWordInSP(string key)
        {
            var keyParameter = key != null ?
                new ObjectParameter("Key", key) :
                new ObjectParameter("Key", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SYS_SearchWordInSP_Result>("SYS_SearchWordInSP", keyParameter);
        }
    
        public virtual ObjectResult<SysDB_CreateKey_Result> SysDB_CreateKey()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SysDB_CreateKey_Result>("SysDB_CreateKey");
        }
    
        public virtual ObjectResult<Nullable<int>> Web_AddAPPUser(string medicalRecordNumber, string mailAddress, string password, string name, Nullable<int> sexID, Nullable<System.DateTime> birthday, string identityNumber, Nullable<int> chronicSubTypeID, Nullable<System.DateTime> diagnosisDate, Nullable<decimal> bodyHeight, Nullable<decimal> bodyWeight, string mobileNumber, Nullable<bool> enable, Nullable<int> lastUserID)
        {
            var medicalRecordNumberParameter = medicalRecordNumber != null ?
                new ObjectParameter("MedicalRecordNumber", medicalRecordNumber) :
                new ObjectParameter("MedicalRecordNumber", typeof(string));
    
            var mailAddressParameter = mailAddress != null ?
                new ObjectParameter("MailAddress", mailAddress) :
                new ObjectParameter("MailAddress", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sexIDParameter = sexID.HasValue ?
                new ObjectParameter("SexID", sexID) :
                new ObjectParameter("SexID", typeof(int));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            var identityNumberParameter = identityNumber != null ?
                new ObjectParameter("IdentityNumber", identityNumber) :
                new ObjectParameter("IdentityNumber", typeof(string));
    
            var chronicSubTypeIDParameter = chronicSubTypeID.HasValue ?
                new ObjectParameter("ChronicSubTypeID", chronicSubTypeID) :
                new ObjectParameter("ChronicSubTypeID", typeof(int));
    
            var diagnosisDateParameter = diagnosisDate.HasValue ?
                new ObjectParameter("DiagnosisDate", diagnosisDate) :
                new ObjectParameter("DiagnosisDate", typeof(System.DateTime));
    
            var bodyHeightParameter = bodyHeight.HasValue ?
                new ObjectParameter("BodyHeight", bodyHeight) :
                new ObjectParameter("BodyHeight", typeof(decimal));
    
            var bodyWeightParameter = bodyWeight.HasValue ?
                new ObjectParameter("BodyWeight", bodyWeight) :
                new ObjectParameter("BodyWeight", typeof(decimal));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var enableParameter = enable.HasValue ?
                new ObjectParameter("Enable", enable) :
                new ObjectParameter("Enable", typeof(bool));
    
            var lastUserIDParameter = lastUserID.HasValue ?
                new ObjectParameter("LastUserID", lastUserID) :
                new ObjectParameter("LastUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Web_AddAPPUser", medicalRecordNumberParameter, mailAddressParameter, passwordParameter, nameParameter, sexIDParameter, birthdayParameter, identityNumberParameter, chronicSubTypeIDParameter, diagnosisDateParameter, bodyHeightParameter, bodyWeightParameter, mobileNumberParameter, enableParameter, lastUserIDParameter);
        }
    
        public virtual int Web_AddAPPVerifyCode(Nullable<int> patientID, Nullable<int> aPPUserID, string identityNumber, string userKey, string iP, ObjectParameter newUserKey)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var aPPUserIDParameter = aPPUserID.HasValue ?
                new ObjectParameter("APPUserID", aPPUserID) :
                new ObjectParameter("APPUserID", typeof(int));
    
            var identityNumberParameter = identityNumber != null ?
                new ObjectParameter("IdentityNumber", identityNumber) :
                new ObjectParameter("IdentityNumber", typeof(string));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Web_AddAPPVerifyCode", patientIDParameter, aPPUserIDParameter, identityNumberParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual int Web_AddCGCareGroup(Nullable<int> patientID, Nullable<int> unitID, string userKey, string iP, ObjectParameter newUserKey)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Web_AddCGCareGroup", patientIDParameter, unitIDParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual int Web_AddCGServiceRecord(Nullable<int> patientID, Nullable<System.DateTime> serviceDate, Nullable<System.TimeSpan> startTime, Nullable<System.TimeSpan> endTime, Nullable<int> serviceRecordTypeID, Nullable<int> serviceTypeID, string serviceTypeNote, Nullable<int> serviceResultID, string serviceResultNote, string note, string responseMessage, string userKey, string iP, ObjectParameter newUserKey)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var serviceDateParameter = serviceDate.HasValue ?
                new ObjectParameter("ServiceDate", serviceDate) :
                new ObjectParameter("ServiceDate", typeof(System.DateTime));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.TimeSpan));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.TimeSpan));
    
            var serviceRecordTypeIDParameter = serviceRecordTypeID.HasValue ?
                new ObjectParameter("ServiceRecordTypeID", serviceRecordTypeID) :
                new ObjectParameter("ServiceRecordTypeID", typeof(int));
    
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("ServiceTypeID", serviceTypeID) :
                new ObjectParameter("ServiceTypeID", typeof(int));
    
            var serviceTypeNoteParameter = serviceTypeNote != null ?
                new ObjectParameter("ServiceTypeNote", serviceTypeNote) :
                new ObjectParameter("ServiceTypeNote", typeof(string));
    
            var serviceResultIDParameter = serviceResultID.HasValue ?
                new ObjectParameter("ServiceResultID", serviceResultID) :
                new ObjectParameter("ServiceResultID", typeof(int));
    
            var serviceResultNoteParameter = serviceResultNote != null ?
                new ObjectParameter("ServiceResultNote", serviceResultNote) :
                new ObjectParameter("ServiceResultNote", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var responseMessageParameter = responseMessage != null ?
                new ObjectParameter("ResponseMessage", responseMessage) :
                new ObjectParameter("ResponseMessage", typeof(string));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Web_AddCGServiceRecord", patientIDParameter, serviceDateParameter, startTimeParameter, endTimeParameter, serviceRecordTypeIDParameter, serviceTypeIDParameter, serviceTypeNoteParameter, serviceResultIDParameter, serviceResultNoteParameter, noteParameter, responseMessageParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual int Web_AddCMRContactPerson(Nullable<int> patientID, Nullable<int> relationshipTypeID, string contactName, Nullable<int> contactSexID, string emergencyHomeTelphone, string emergencyOfficeTelphone, string emergencyCellPhone, Nullable<int> lastUserID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var relationshipTypeIDParameter = relationshipTypeID.HasValue ?
                new ObjectParameter("RelationshipTypeID", relationshipTypeID) :
                new ObjectParameter("RelationshipTypeID", typeof(int));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var contactSexIDParameter = contactSexID.HasValue ?
                new ObjectParameter("ContactSexID", contactSexID) :
                new ObjectParameter("ContactSexID", typeof(int));
    
            var emergencyHomeTelphoneParameter = emergencyHomeTelphone != null ?
                new ObjectParameter("EmergencyHomeTelphone", emergencyHomeTelphone) :
                new ObjectParameter("EmergencyHomeTelphone", typeof(string));
    
            var emergencyOfficeTelphoneParameter = emergencyOfficeTelphone != null ?
                new ObjectParameter("EmergencyOfficeTelphone", emergencyOfficeTelphone) :
                new ObjectParameter("EmergencyOfficeTelphone", typeof(string));
    
            var emergencyCellPhoneParameter = emergencyCellPhone != null ?
                new ObjectParameter("EmergencyCellPhone", emergencyCellPhone) :
                new ObjectParameter("EmergencyCellPhone", typeof(string));
    
            var lastUserIDParameter = lastUserID.HasValue ?
                new ObjectParameter("LastUserID", lastUserID) :
                new ObjectParameter("LastUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Web_AddCMRContactPerson", patientIDParameter, relationshipTypeIDParameter, contactNameParameter, contactSexIDParameter, emergencyHomeTelphoneParameter, emergencyOfficeTelphoneParameter, emergencyCellPhoneParameter, lastUserIDParameter);
        }
    
        public virtual int Web_AddCMRPatient(Nullable<int> createUserID, Nullable<int> lastUserID, string medicalRecordNumber, Nullable<int> chronicTypeID, Nullable<int> parentUnitID, Nullable<int> unitID, Nullable<int> appUserID, Nullable<bool> enable, Nullable<int> caseStatus, string patientName, string identityNumber, Nullable<System.DateTime> birthday, Nullable<int> sexID, Nullable<int> raceTypeID, Nullable<int> bloodTypeID, Nullable<int> bloodRhTypeID, string disabledID, Nullable<int> languageTypeID, Nullable<int> religionTypeID, Nullable<int> maritalStatus, Nullable<int> registerCountryID, Nullable<int> registerStateID, Nullable<int> registerCityID, Nullable<int> registerDistrictID, string registerAddress, Nullable<int> educationLevelID, Nullable<decimal> bodyHeight, Nullable<decimal> bodyWeight, Nullable<int> nowCountryID, Nullable<int> nowStateID, Nullable<int> nowCityID, Nullable<int> nowDistrictID, string nowAddress, string homeTelphone, string officeTelphone, string cellPhone, string eMail, Nullable<int> livingStatus, Nullable<int> smokeTypeID, Nullable<int> drinkTypeID, Nullable<int> arecaTypeID, Nullable<System.DateTime> inspectionDate, Nullable<System.DateTime> diagnosisDate, Nullable<int> chronicSubTypeID, Nullable<int> familyHistoryTypeID, Nullable<int> pathologyID, string resultValue)
        {
            var createUserIDParameter = createUserID.HasValue ?
                new ObjectParameter("CreateUserID", createUserID) :
                new ObjectParameter("CreateUserID", typeof(int));
    
            var lastUserIDParameter = lastUserID.HasValue ?
                new ObjectParameter("LastUserID", lastUserID) :
                new ObjectParameter("LastUserID", typeof(int));
    
            var medicalRecordNumberParameter = medicalRecordNumber != null ?
                new ObjectParameter("MedicalRecordNumber", medicalRecordNumber) :
                new ObjectParameter("MedicalRecordNumber", typeof(string));
    
            var chronicTypeIDParameter = chronicTypeID.HasValue ?
                new ObjectParameter("ChronicTypeID", chronicTypeID) :
                new ObjectParameter("ChronicTypeID", typeof(int));
    
            var parentUnitIDParameter = parentUnitID.HasValue ?
                new ObjectParameter("ParentUnitID", parentUnitID) :
                new ObjectParameter("ParentUnitID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var appUserIDParameter = appUserID.HasValue ?
                new ObjectParameter("AppUserID", appUserID) :
                new ObjectParameter("AppUserID", typeof(int));
    
            var enableParameter = enable.HasValue ?
                new ObjectParameter("Enable", enable) :
                new ObjectParameter("Enable", typeof(bool));
    
            var caseStatusParameter = caseStatus.HasValue ?
                new ObjectParameter("CaseStatus", caseStatus) :
                new ObjectParameter("CaseStatus", typeof(int));
    
            var patientNameParameter = patientName != null ?
                new ObjectParameter("PatientName", patientName) :
                new ObjectParameter("PatientName", typeof(string));
    
            var identityNumberParameter = identityNumber != null ?
                new ObjectParameter("IdentityNumber", identityNumber) :
                new ObjectParameter("IdentityNumber", typeof(string));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            var sexIDParameter = sexID.HasValue ?
                new ObjectParameter("SexID", sexID) :
                new ObjectParameter("SexID", typeof(int));
    
            var raceTypeIDParameter = raceTypeID.HasValue ?
                new ObjectParameter("RaceTypeID", raceTypeID) :
                new ObjectParameter("RaceTypeID", typeof(int));
    
            var bloodTypeIDParameter = bloodTypeID.HasValue ?
                new ObjectParameter("BloodTypeID", bloodTypeID) :
                new ObjectParameter("BloodTypeID", typeof(int));
    
            var bloodRhTypeIDParameter = bloodRhTypeID.HasValue ?
                new ObjectParameter("BloodRhTypeID", bloodRhTypeID) :
                new ObjectParameter("BloodRhTypeID", typeof(int));
    
            var disabledIDParameter = disabledID != null ?
                new ObjectParameter("DisabledID", disabledID) :
                new ObjectParameter("DisabledID", typeof(string));
    
            var languageTypeIDParameter = languageTypeID.HasValue ?
                new ObjectParameter("LanguageTypeID", languageTypeID) :
                new ObjectParameter("LanguageTypeID", typeof(int));
    
            var religionTypeIDParameter = religionTypeID.HasValue ?
                new ObjectParameter("ReligionTypeID", religionTypeID) :
                new ObjectParameter("ReligionTypeID", typeof(int));
    
            var maritalStatusParameter = maritalStatus.HasValue ?
                new ObjectParameter("MaritalStatus", maritalStatus) :
                new ObjectParameter("MaritalStatus", typeof(int));
    
            var registerCountryIDParameter = registerCountryID.HasValue ?
                new ObjectParameter("RegisterCountryID", registerCountryID) :
                new ObjectParameter("RegisterCountryID", typeof(int));
    
            var registerStateIDParameter = registerStateID.HasValue ?
                new ObjectParameter("RegisterStateID", registerStateID) :
                new ObjectParameter("RegisterStateID", typeof(int));
    
            var registerCityIDParameter = registerCityID.HasValue ?
                new ObjectParameter("RegisterCityID", registerCityID) :
                new ObjectParameter("RegisterCityID", typeof(int));
    
            var registerDistrictIDParameter = registerDistrictID.HasValue ?
                new ObjectParameter("RegisterDistrictID", registerDistrictID) :
                new ObjectParameter("RegisterDistrictID", typeof(int));
    
            var registerAddressParameter = registerAddress != null ?
                new ObjectParameter("RegisterAddress", registerAddress) :
                new ObjectParameter("RegisterAddress", typeof(string));
    
            var educationLevelIDParameter = educationLevelID.HasValue ?
                new ObjectParameter("EducationLevelID", educationLevelID) :
                new ObjectParameter("EducationLevelID", typeof(int));
    
            var bodyHeightParameter = bodyHeight.HasValue ?
                new ObjectParameter("BodyHeight", bodyHeight) :
                new ObjectParameter("BodyHeight", typeof(decimal));
    
            var bodyWeightParameter = bodyWeight.HasValue ?
                new ObjectParameter("BodyWeight", bodyWeight) :
                new ObjectParameter("BodyWeight", typeof(decimal));
    
            var nowCountryIDParameter = nowCountryID.HasValue ?
                new ObjectParameter("NowCountryID", nowCountryID) :
                new ObjectParameter("NowCountryID", typeof(int));
    
            var nowStateIDParameter = nowStateID.HasValue ?
                new ObjectParameter("NowStateID", nowStateID) :
                new ObjectParameter("NowStateID", typeof(int));
    
            var nowCityIDParameter = nowCityID.HasValue ?
                new ObjectParameter("NowCityID", nowCityID) :
                new ObjectParameter("NowCityID", typeof(int));
    
            var nowDistrictIDParameter = nowDistrictID.HasValue ?
                new ObjectParameter("NowDistrictID", nowDistrictID) :
                new ObjectParameter("NowDistrictID", typeof(int));
    
            var nowAddressParameter = nowAddress != null ?
                new ObjectParameter("NowAddress", nowAddress) :
                new ObjectParameter("NowAddress", typeof(string));
    
            var homeTelphoneParameter = homeTelphone != null ?
                new ObjectParameter("HomeTelphone", homeTelphone) :
                new ObjectParameter("HomeTelphone", typeof(string));
    
            var officeTelphoneParameter = officeTelphone != null ?
                new ObjectParameter("OfficeTelphone", officeTelphone) :
                new ObjectParameter("OfficeTelphone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var eMailParameter = eMail != null ?
                new ObjectParameter("eMail", eMail) :
                new ObjectParameter("eMail", typeof(string));
    
            var livingStatusParameter = livingStatus.HasValue ?
                new ObjectParameter("LivingStatus", livingStatus) :
                new ObjectParameter("LivingStatus", typeof(int));
    
            var smokeTypeIDParameter = smokeTypeID.HasValue ?
                new ObjectParameter("SmokeTypeID", smokeTypeID) :
                new ObjectParameter("SmokeTypeID", typeof(int));
    
            var drinkTypeIDParameter = drinkTypeID.HasValue ?
                new ObjectParameter("DrinkTypeID", drinkTypeID) :
                new ObjectParameter("DrinkTypeID", typeof(int));
    
            var arecaTypeIDParameter = arecaTypeID.HasValue ?
                new ObjectParameter("ArecaTypeID", arecaTypeID) :
                new ObjectParameter("ArecaTypeID", typeof(int));
    
            var inspectionDateParameter = inspectionDate.HasValue ?
                new ObjectParameter("InspectionDate", inspectionDate) :
                new ObjectParameter("InspectionDate", typeof(System.DateTime));
    
            var diagnosisDateParameter = diagnosisDate.HasValue ?
                new ObjectParameter("DiagnosisDate", diagnosisDate) :
                new ObjectParameter("DiagnosisDate", typeof(System.DateTime));
    
            var chronicSubTypeIDParameter = chronicSubTypeID.HasValue ?
                new ObjectParameter("ChronicSubTypeID", chronicSubTypeID) :
                new ObjectParameter("ChronicSubTypeID", typeof(int));
    
            var familyHistoryTypeIDParameter = familyHistoryTypeID.HasValue ?
                new ObjectParameter("FamilyHistoryTypeID", familyHistoryTypeID) :
                new ObjectParameter("FamilyHistoryTypeID", typeof(int));
    
            var pathologyIDParameter = pathologyID.HasValue ?
                new ObjectParameter("PathologyID", pathologyID) :
                new ObjectParameter("PathologyID", typeof(int));
    
            var resultValueParameter = resultValue != null ?
                new ObjectParameter("ResultValue", resultValue) :
                new ObjectParameter("ResultValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Web_AddCMRPatient", createUserIDParameter, lastUserIDParameter, medicalRecordNumberParameter, chronicTypeIDParameter, parentUnitIDParameter, unitIDParameter, appUserIDParameter, enableParameter, caseStatusParameter, patientNameParameter, identityNumberParameter, birthdayParameter, sexIDParameter, raceTypeIDParameter, bloodTypeIDParameter, bloodRhTypeIDParameter, disabledIDParameter, languageTypeIDParameter, religionTypeIDParameter, maritalStatusParameter, registerCountryIDParameter, registerStateIDParameter, registerCityIDParameter, registerDistrictIDParameter, registerAddressParameter, educationLevelIDParameter, bodyHeightParameter, bodyWeightParameter, nowCountryIDParameter, nowStateIDParameter, nowCityIDParameter, nowDistrictIDParameter, nowAddressParameter, homeTelphoneParameter, officeTelphoneParameter, cellPhoneParameter, eMailParameter, livingStatusParameter, smokeTypeIDParameter, drinkTypeIDParameter, arecaTypeIDParameter, inspectionDateParameter, diagnosisDateParameter, chronicSubTypeIDParameter, familyHistoryTypeIDParameter, pathologyIDParameter, resultValueParameter);
        }
    
        public virtual int Web_AddCMRPatientBase(Nullable<int> patientID, string patientName, string identityNumber, Nullable<System.DateTime> birthday, Nullable<int> sexID, Nullable<int> raceTypeID, Nullable<int> bloodTypeID, Nullable<int> bloodRhTypeID, string disabledID, Nullable<int> languageTypeID, Nullable<int> religionTypeID, Nullable<int> maritalStatus, Nullable<int> registerCountryID, Nullable<int> registerStateID, Nullable<int> registerCityID, Nullable<int> registerDistrictID, string registerAddress, Nullable<int> educationLevelID, Nullable<decimal> bodyHeight, Nullable<decimal> bodyWeight, Nullable<int> createUserID, Nullable<int> lastUserID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientNameParameter = patientName != null ?
                new ObjectParameter("PatientName", patientName) :
                new ObjectParameter("PatientName", typeof(string));
    
            var identityNumberParameter = identityNumber != null ?
                new ObjectParameter("IdentityNumber", identityNumber) :
                new ObjectParameter("IdentityNumber", typeof(string));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            var sexIDParameter = sexID.HasValue ?
                new ObjectParameter("SexID", sexID) :
                new ObjectParameter("SexID", typeof(int));
    
            var raceTypeIDParameter = raceTypeID.HasValue ?
                new ObjectParameter("RaceTypeID", raceTypeID) :
                new ObjectParameter("RaceTypeID", typeof(int));
    
            var bloodTypeIDParameter = bloodTypeID.HasValue ?
                new ObjectParameter("BloodTypeID", bloodTypeID) :
                new ObjectParameter("BloodTypeID", typeof(int));
    
            var bloodRhTypeIDParameter = bloodRhTypeID.HasValue ?
                new ObjectParameter("BloodRhTypeID", bloodRhTypeID) :
                new ObjectParameter("BloodRhTypeID", typeof(int));
    
            var disabledIDParameter = disabledID != null ?
                new ObjectParameter("DisabledID", disabledID) :
                new ObjectParameter("DisabledID", typeof(string));
    
            var languageTypeIDParameter = languageTypeID.HasValue ?
                new ObjectParameter("LanguageTypeID", languageTypeID) :
                new ObjectParameter("LanguageTypeID", typeof(int));
    
            var religionTypeIDParameter = religionTypeID.HasValue ?
                new ObjectParameter("ReligionTypeID", religionTypeID) :
                new ObjectParameter("ReligionTypeID", typeof(int));
    
            var maritalStatusParameter = maritalStatus.HasValue ?
                new ObjectParameter("MaritalStatus", maritalStatus) :
                new ObjectParameter("MaritalStatus", typeof(int));
    
            var registerCountryIDParameter = registerCountryID.HasValue ?
                new ObjectParameter("RegisterCountryID", registerCountryID) :
                new ObjectParameter("RegisterCountryID", typeof(int));
    
            var registerStateIDParameter = registerStateID.HasValue ?
                new ObjectParameter("RegisterStateID", registerStateID) :
                new ObjectParameter("RegisterStateID", typeof(int));
    
            var registerCityIDParameter = registerCityID.HasValue ?
                new ObjectParameter("RegisterCityID", registerCityID) :
                new ObjectParameter("RegisterCityID", typeof(int));
    
            var registerDistrictIDParameter = registerDistrictID.HasValue ?
                new ObjectParameter("RegisterDistrictID", registerDistrictID) :
                new ObjectParameter("RegisterDistrictID", typeof(int));
    
            var registerAddressParameter = registerAddress != null ?
                new ObjectParameter("RegisterAddress", registerAddress) :
                new ObjectParameter("RegisterAddress", typeof(string));
    
            var educationLevelIDParameter = educationLevelID.HasValue ?
                new ObjectParameter("EducationLevelID", educationLevelID) :
                new ObjectParameter("EducationLevelID", typeof(int));
    
            var bodyHeightParameter = bodyHeight.HasValue ?
                new ObjectParameter("BodyHeight", bodyHeight) :
                new ObjectParameter("BodyHeight", typeof(decimal));
    
            var bodyWeightParameter = bodyWeight.HasValue ?
                new ObjectParameter("BodyWeight", bodyWeight) :
                new ObjectParameter("BodyWeight", typeof(decimal));
    
            var createUserIDParameter = createUserID.HasValue ?
                new ObjectParameter("CreateUserID", createUserID) :
                new ObjectParameter("CreateUserID", typeof(int));
    
            var lastUserIDParameter = lastUserID.HasValue ?
                new ObjectParameter("LastUserID", lastUserID) :
                new ObjectParameter("LastUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Web_AddCMRPatientBase", patientIDParameter, patientNameParameter, identityNumberParameter, birthdayParameter, sexIDParameter, raceTypeIDParameter, bloodTypeIDParameter, bloodRhTypeIDParameter, disabledIDParameter, languageTypeIDParameter, religionTypeIDParameter, maritalStatusParameter, registerCountryIDParameter, registerStateIDParameter, registerCityIDParameter, registerDistrictIDParameter, registerAddressParameter, educationLevelIDParameter, bodyHeightParameter, bodyWeightParameter, createUserIDParameter, lastUserIDParameter);
        }
    
        public virtual int Web_AddCMRPatientDetails(Nullable<int> patientID, Nullable<int> nowCountryID, Nullable<int> nowStateID, Nullable<int> nowCityID, Nullable<int> nowDistrictID, string nowAddress, string homeTelphone, string officeTelphone, string cellPhone, string eMail, Nullable<int> livingStatus, Nullable<int> smokeTypeID, Nullable<int> drinkTypeID, Nullable<int> arecaTypeID, Nullable<int> lastUserID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var nowCountryIDParameter = nowCountryID.HasValue ?
                new ObjectParameter("NowCountryID", nowCountryID) :
                new ObjectParameter("NowCountryID", typeof(int));
    
            var nowStateIDParameter = nowStateID.HasValue ?
                new ObjectParameter("NowStateID", nowStateID) :
                new ObjectParameter("NowStateID", typeof(int));
    
            var nowCityIDParameter = nowCityID.HasValue ?
                new ObjectParameter("NowCityID", nowCityID) :
                new ObjectParameter("NowCityID", typeof(int));
    
            var nowDistrictIDParameter = nowDistrictID.HasValue ?
                new ObjectParameter("NowDistrictID", nowDistrictID) :
                new ObjectParameter("NowDistrictID", typeof(int));
    
            var nowAddressParameter = nowAddress != null ?
                new ObjectParameter("NowAddress", nowAddress) :
                new ObjectParameter("NowAddress", typeof(string));
    
            var homeTelphoneParameter = homeTelphone != null ?
                new ObjectParameter("HomeTelphone", homeTelphone) :
                new ObjectParameter("HomeTelphone", typeof(string));
    
            var officeTelphoneParameter = officeTelphone != null ?
                new ObjectParameter("OfficeTelphone", officeTelphone) :
                new ObjectParameter("OfficeTelphone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var eMailParameter = eMail != null ?
                new ObjectParameter("eMail", eMail) :
                new ObjectParameter("eMail", typeof(string));
    
            var livingStatusParameter = livingStatus.HasValue ?
                new ObjectParameter("LivingStatus", livingStatus) :
                new ObjectParameter("LivingStatus", typeof(int));
    
            var smokeTypeIDParameter = smokeTypeID.HasValue ?
                new ObjectParameter("SmokeTypeID", smokeTypeID) :
                new ObjectParameter("SmokeTypeID", typeof(int));
    
            var drinkTypeIDParameter = drinkTypeID.HasValue ?
                new ObjectParameter("DrinkTypeID", drinkTypeID) :
                new ObjectParameter("DrinkTypeID", typeof(int));
    
            var arecaTypeIDParameter = arecaTypeID.HasValue ?
                new ObjectParameter("ArecaTypeID", arecaTypeID) :
                new ObjectParameter("ArecaTypeID", typeof(int));
    
            var lastUserIDParameter = lastUserID.HasValue ?
                new ObjectParameter("LastUserID", lastUserID) :
                new ObjectParameter("LastUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Web_AddCMRPatientDetails", patientIDParameter, nowCountryIDParameter, nowStateIDParameter, nowCityIDParameter, nowDistrictIDParameter, nowAddressParameter, homeTelphoneParameter, officeTelphoneParameter, cellPhoneParameter, eMailParameter, livingStatusParameter, smokeTypeIDParameter, drinkTypeIDParameter, arecaTypeIDParameter, lastUserIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Web_AddCMRPatientKey(Nullable<int> createUserID, Nullable<int> lastUserID, string medicalRecordNumber, Nullable<int> chronicTypeID, Nullable<int> parentUnitID, Nullable<int> unitID, Nullable<int> appUserID, Nullable<bool> enable, Nullable<int> caseStatus)
        {
            var createUserIDParameter = createUserID.HasValue ?
                new ObjectParameter("CreateUserID", createUserID) :
                new ObjectParameter("CreateUserID", typeof(int));
    
            var lastUserIDParameter = lastUserID.HasValue ?
                new ObjectParameter("LastUserID", lastUserID) :
                new ObjectParameter("LastUserID", typeof(int));
    
            var medicalRecordNumberParameter = medicalRecordNumber != null ?
                new ObjectParameter("MedicalRecordNumber", medicalRecordNumber) :
                new ObjectParameter("MedicalRecordNumber", typeof(string));
    
            var chronicTypeIDParameter = chronicTypeID.HasValue ?
                new ObjectParameter("ChronicTypeID", chronicTypeID) :
                new ObjectParameter("ChronicTypeID", typeof(int));
    
            var parentUnitIDParameter = parentUnitID.HasValue ?
                new ObjectParameter("ParentUnitID", parentUnitID) :
                new ObjectParameter("ParentUnitID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var appUserIDParameter = appUserID.HasValue ?
                new ObjectParameter("AppUserID", appUserID) :
                new ObjectParameter("AppUserID", typeof(int));
    
            var enableParameter = enable.HasValue ?
                new ObjectParameter("Enable", enable) :
                new ObjectParameter("Enable", typeof(bool));
    
            var caseStatusParameter = caseStatus.HasValue ?
                new ObjectParameter("CaseStatus", caseStatus) :
                new ObjectParameter("CaseStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Web_AddCMRPatientKey", createUserIDParameter, lastUserIDParameter, medicalRecordNumberParameter, chronicTypeIDParameter, parentUnitIDParameter, unitIDParameter, appUserIDParameter, enableParameter, caseStatusParameter);
        }
    
        public virtual int Web_AddOrDeleteUserAssignUnit(Nullable<int> sTATUS, Nullable<int> unitID, Nullable<int> userID, string userKey, string iP, ObjectParameter newUserKey)
        {
            var sTATUSParameter = sTATUS.HasValue ?
                new ObjectParameter("STATUS", sTATUS) :
                new ObjectParameter("STATUS", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Web_AddOrDeleteUserAssignUnit", sTATUSParameter, unitIDParameter, userIDParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual int Web_AddPMRPathologyBody(Nullable<int> patientID, Nullable<int> headID, Nullable<int> pathologyID, string resultValue, Nullable<System.DateTime> inspectionDate, Nullable<int> createUserID, Nullable<int> lastUserID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var headIDParameter = headID.HasValue ?
                new ObjectParameter("HeadID", headID) :
                new ObjectParameter("HeadID", typeof(int));
    
            var pathologyIDParameter = pathologyID.HasValue ?
                new ObjectParameter("PathologyID", pathologyID) :
                new ObjectParameter("PathologyID", typeof(int));
    
            var resultValueParameter = resultValue != null ?
                new ObjectParameter("ResultValue", resultValue) :
                new ObjectParameter("ResultValue", typeof(string));
    
            var inspectionDateParameter = inspectionDate.HasValue ?
                new ObjectParameter("InspectionDate", inspectionDate) :
                new ObjectParameter("InspectionDate", typeof(System.DateTime));
    
            var createUserIDParameter = createUserID.HasValue ?
                new ObjectParameter("CreateUserID", createUserID) :
                new ObjectParameter("CreateUserID", typeof(int));
    
            var lastUserIDParameter = lastUserID.HasValue ?
                new ObjectParameter("LastUserID", lastUserID) :
                new ObjectParameter("LastUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Web_AddPMRPathologyBody", patientIDParameter, headIDParameter, pathologyIDParameter, resultValueParameter, inspectionDateParameter, createUserIDParameter, lastUserIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Web_AddPMRPathologyHead(Nullable<int> patientID, Nullable<int> chronicTypeID, Nullable<System.DateTime> inspectionDate, Nullable<System.DateTime> diagnosisDate, Nullable<int> chronicSubTypeID, Nullable<int> familyHistoryTypeID, Nullable<int> createUserID, Nullable<int> lastUserID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var chronicTypeIDParameter = chronicTypeID.HasValue ?
                new ObjectParameter("ChronicTypeID", chronicTypeID) :
                new ObjectParameter("ChronicTypeID", typeof(int));
    
            var inspectionDateParameter = inspectionDate.HasValue ?
                new ObjectParameter("InspectionDate", inspectionDate) :
                new ObjectParameter("InspectionDate", typeof(System.DateTime));
    
            var diagnosisDateParameter = diagnosisDate.HasValue ?
                new ObjectParameter("DiagnosisDate", diagnosisDate) :
                new ObjectParameter("DiagnosisDate", typeof(System.DateTime));
    
            var chronicSubTypeIDParameter = chronicSubTypeID.HasValue ?
                new ObjectParameter("ChronicSubTypeID", chronicSubTypeID) :
                new ObjectParameter("ChronicSubTypeID", typeof(int));
    
            var familyHistoryTypeIDParameter = familyHistoryTypeID.HasValue ?
                new ObjectParameter("FamilyHistoryTypeID", familyHistoryTypeID) :
                new ObjectParameter("FamilyHistoryTypeID", typeof(int));
    
            var createUserIDParameter = createUserID.HasValue ?
                new ObjectParameter("CreateUserID", createUserID) :
                new ObjectParameter("CreateUserID", typeof(int));
    
            var lastUserIDParameter = lastUserID.HasValue ?
                new ObjectParameter("LastUserID", lastUserID) :
                new ObjectParameter("LastUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Web_AddPMRPathologyHead", patientIDParameter, chronicTypeIDParameter, inspectionDateParameter, diagnosisDateParameter, chronicSubTypeIDParameter, familyHistoryTypeIDParameter, createUserIDParameter, lastUserIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Web_AddSYSUnit(string unitName, Nullable<int> parentUnitID, Nullable<int> unitRankTypeID, string userKey, string iP, ObjectParameter newUserKey)
        {
            var unitNameParameter = unitName != null ?
                new ObjectParameter("UnitName", unitName) :
                new ObjectParameter("UnitName", typeof(string));
    
            var parentUnitIDParameter = parentUnitID.HasValue ?
                new ObjectParameter("ParentUnitID", parentUnitID) :
                new ObjectParameter("ParentUnitID", typeof(int));
    
            var unitRankTypeIDParameter = unitRankTypeID.HasValue ?
                new ObjectParameter("UnitRankTypeID", unitRankTypeID) :
                new ObjectParameter("UnitRankTypeID", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Web_AddSYSUnit", unitNameParameter, parentUnitIDParameter, unitRankTypeIDParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual int Web_AddSYSUserAssignUnit(Nullable<int> unitID, Nullable<int> userID, string userKey, string iP, ObjectParameter newUserKey)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Web_AddSYSUserAssignUnit", unitIDParameter, userIDParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_AddWorkShift_Result> Web_AddWorkShift(Nullable<int> userid, Nullable<int> dayofweek, Nullable<System.DateTime> shiftdate, Nullable<System.TimeSpan> starttime, Nullable<System.TimeSpan> endtime, Nullable<int> limitnumber, Nullable<int> roomlimit, Nullable<bool> callbyextern)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var dayofweekParameter = dayofweek.HasValue ?
                new ObjectParameter("dayofweek", dayofweek) :
                new ObjectParameter("dayofweek", typeof(int));
    
            var shiftdateParameter = shiftdate.HasValue ?
                new ObjectParameter("shiftdate", shiftdate) :
                new ObjectParameter("shiftdate", typeof(System.DateTime));
    
            var starttimeParameter = starttime.HasValue ?
                new ObjectParameter("starttime", starttime) :
                new ObjectParameter("starttime", typeof(System.TimeSpan));
    
            var endtimeParameter = endtime.HasValue ?
                new ObjectParameter("endtime", endtime) :
                new ObjectParameter("endtime", typeof(System.TimeSpan));
    
            var limitnumberParameter = limitnumber.HasValue ?
                new ObjectParameter("limitnumber", limitnumber) :
                new ObjectParameter("limitnumber", typeof(int));
    
            var roomlimitParameter = roomlimit.HasValue ?
                new ObjectParameter("roomlimit", roomlimit) :
                new ObjectParameter("roomlimit", typeof(int));
    
            var callbyexternParameter = callbyextern.HasValue ?
                new ObjectParameter("callbyextern", callbyextern) :
                new ObjectParameter("callbyextern", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_AddWorkShift_Result>("Web_AddWorkShift", useridParameter, dayofweekParameter, shiftdateParameter, starttimeParameter, endtimeParameter, limitnumberParameter, roomlimitParameter, callbyexternParameter);
        }
    
        public virtual int Web_APP_GenerateCode(Nullable<int> patientID, string userKey, string iP, ObjectParameter newUserKey)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Web_APP_GenerateCode", patientIDParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_CheckAddressArea_Result> Web_CheckAddressArea(Nullable<int> stateID, Nullable<int> cityID, Nullable<int> districtID)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_CheckAddressArea_Result>("Web_CheckAddressArea", stateIDParameter, cityIDParameter, districtIDParameter);
        }
    
        public virtual ObjectResult<Web_DeleteSYSUnitAndUser_Result> Web_DeleteSYSUnitAndUser(Nullable<int> unitID, string userKey, string iP, ObjectParameter newUserKey)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_DeleteSYSUnitAndUser_Result>("Web_DeleteSYSUnitAndUser", unitIDParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual int Web_DeleteWorkShift(Nullable<int> userid, Nullable<System.DateTime> shiftdate, Nullable<int> timeid, Nullable<int> roomid, string uuid, string meeting_id, string meeting_hostid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var shiftdateParameter = shiftdate.HasValue ?
                new ObjectParameter("shiftdate", shiftdate) :
                new ObjectParameter("shiftdate", typeof(System.DateTime));
    
            var timeidParameter = timeid.HasValue ?
                new ObjectParameter("timeid", timeid) :
                new ObjectParameter("timeid", typeof(int));
    
            var roomidParameter = roomid.HasValue ?
                new ObjectParameter("roomid", roomid) :
                new ObjectParameter("roomid", typeof(int));
    
            var uuidParameter = uuid != null ?
                new ObjectParameter("uuid", uuid) :
                new ObjectParameter("uuid", typeof(string));
    
            var meeting_idParameter = meeting_id != null ?
                new ObjectParameter("meeting_id", meeting_id) :
                new ObjectParameter("meeting_id", typeof(string));
    
            var meeting_hostidParameter = meeting_hostid != null ?
                new ObjectParameter("meeting_hostid", meeting_hostid) :
                new ObjectParameter("meeting_hostid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Web_DeleteWorkShift", useridParameter, shiftdateParameter, timeidParameter, roomidParameter, uuidParameter, meeting_idParameter, meeting_hostidParameter);
        }
    
        public virtual int Web_EditAppUser(Nullable<int> appUserID, Nullable<bool> enable, Nullable<int> paymentType, string userKey, string iP, ObjectParameter newUserKey)
        {
            var appUserIDParameter = appUserID.HasValue ?
                new ObjectParameter("AppUserID", appUserID) :
                new ObjectParameter("AppUserID", typeof(int));
    
            var enableParameter = enable.HasValue ?
                new ObjectParameter("Enable", enable) :
                new ObjectParameter("Enable", typeof(bool));
    
            var paymentTypeParameter = paymentType.HasValue ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Web_EditAppUser", appUserIDParameter, enableParameter, paymentTypeParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual int Web_EditCMRDiabetesAlertConfig(Nullable<int> cGUnitID, Nullable<int> patientID, Nullable<int> missingCount, Nullable<decimal> beforeMealHigh, Nullable<decimal> beforeMealLow, Nullable<decimal> afterMealHigh, Nullable<decimal> afterMealLow, Nullable<decimal> othersHigh, Nullable<decimal> othersLow, string userKey, string iP, ObjectParameter newUserKey)
        {
            var cGUnitIDParameter = cGUnitID.HasValue ?
                new ObjectParameter("CGUnitID", cGUnitID) :
                new ObjectParameter("CGUnitID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var missingCountParameter = missingCount.HasValue ?
                new ObjectParameter("MissingCount", missingCount) :
                new ObjectParameter("MissingCount", typeof(int));
    
            var beforeMealHighParameter = beforeMealHigh.HasValue ?
                new ObjectParameter("BeforeMealHigh", beforeMealHigh) :
                new ObjectParameter("BeforeMealHigh", typeof(decimal));
    
            var beforeMealLowParameter = beforeMealLow.HasValue ?
                new ObjectParameter("BeforeMealLow", beforeMealLow) :
                new ObjectParameter("BeforeMealLow", typeof(decimal));
    
            var afterMealHighParameter = afterMealHigh.HasValue ?
                new ObjectParameter("AfterMealHigh", afterMealHigh) :
                new ObjectParameter("AfterMealHigh", typeof(decimal));
    
            var afterMealLowParameter = afterMealLow.HasValue ?
                new ObjectParameter("AfterMealLow", afterMealLow) :
                new ObjectParameter("AfterMealLow", typeof(decimal));
    
            var othersHighParameter = othersHigh.HasValue ?
                new ObjectParameter("OthersHigh", othersHigh) :
                new ObjectParameter("OthersHigh", typeof(decimal));
    
            var othersLowParameter = othersLow.HasValue ?
                new ObjectParameter("OthersLow", othersLow) :
                new ObjectParameter("OthersLow", typeof(decimal));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Web_EditCMRDiabetesAlertConfig", cGUnitIDParameter, patientIDParameter, missingCountParameter, beforeMealHighParameter, beforeMealLowParameter, afterMealHighParameter, afterMealLowParameter, othersHighParameter, othersLowParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual int Web_EditCMRDiabetesPlan(Nullable<int> cGUnitID, Nullable<int> patientID, Nullable<int> mealTypeID, Nullable<int> timingTypeID, Nullable<bool> enable, string userKey, string iP, ObjectParameter newUserKey)
        {
            var cGUnitIDParameter = cGUnitID.HasValue ?
                new ObjectParameter("CGUnitID", cGUnitID) :
                new ObjectParameter("CGUnitID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var mealTypeIDParameter = mealTypeID.HasValue ?
                new ObjectParameter("MealTypeID", mealTypeID) :
                new ObjectParameter("MealTypeID", typeof(int));
    
            var timingTypeIDParameter = timingTypeID.HasValue ?
                new ObjectParameter("TimingTypeID", timingTypeID) :
                new ObjectParameter("TimingTypeID", typeof(int));
    
            var enableParameter = enable.HasValue ?
                new ObjectParameter("Enable", enable) :
                new ObjectParameter("Enable", typeof(bool));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Web_EditCMRDiabetesPlan", cGUnitIDParameter, patientIDParameter, mealTypeIDParameter, timingTypeIDParameter, enableParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual int Web_EditCMRPatientBase(Nullable<int> patientID, string patientName, string identityNumber, Nullable<System.DateTime> birthday, Nullable<decimal> bodyHeight, Nullable<decimal> bodyWeight, Nullable<int> sexID, Nullable<int> raceTypeID, Nullable<int> bloodTypeID, Nullable<int> bloodRhTypeID, string disabledID, Nullable<int> languageTypeID, Nullable<int> religionTypeID, Nullable<int> maritalStatus, Nullable<int> registerCountryID, Nullable<int> registerStateID, Nullable<int> registerCityID, Nullable<int> registerDistrictID, string registerAddress, Nullable<int> educationLevelID, Nullable<int> section, string userKey, string iP, ObjectParameter newUserKey)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientNameParameter = patientName != null ?
                new ObjectParameter("PatientName", patientName) :
                new ObjectParameter("PatientName", typeof(string));
    
            var identityNumberParameter = identityNumber != null ?
                new ObjectParameter("IdentityNumber", identityNumber) :
                new ObjectParameter("IdentityNumber", typeof(string));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            var bodyHeightParameter = bodyHeight.HasValue ?
                new ObjectParameter("BodyHeight", bodyHeight) :
                new ObjectParameter("BodyHeight", typeof(decimal));
    
            var bodyWeightParameter = bodyWeight.HasValue ?
                new ObjectParameter("BodyWeight", bodyWeight) :
                new ObjectParameter("BodyWeight", typeof(decimal));
    
            var sexIDParameter = sexID.HasValue ?
                new ObjectParameter("SexID", sexID) :
                new ObjectParameter("SexID", typeof(int));
    
            var raceTypeIDParameter = raceTypeID.HasValue ?
                new ObjectParameter("RaceTypeID", raceTypeID) :
                new ObjectParameter("RaceTypeID", typeof(int));
    
            var bloodTypeIDParameter = bloodTypeID.HasValue ?
                new ObjectParameter("BloodTypeID", bloodTypeID) :
                new ObjectParameter("BloodTypeID", typeof(int));
    
            var bloodRhTypeIDParameter = bloodRhTypeID.HasValue ?
                new ObjectParameter("BloodRhTypeID", bloodRhTypeID) :
                new ObjectParameter("BloodRhTypeID", typeof(int));
    
            var disabledIDParameter = disabledID != null ?
                new ObjectParameter("DisabledID", disabledID) :
                new ObjectParameter("DisabledID", typeof(string));
    
            var languageTypeIDParameter = languageTypeID.HasValue ?
                new ObjectParameter("LanguageTypeID", languageTypeID) :
                new ObjectParameter("LanguageTypeID", typeof(int));
    
            var religionTypeIDParameter = religionTypeID.HasValue ?
                new ObjectParameter("ReligionTypeID", religionTypeID) :
                new ObjectParameter("ReligionTypeID", typeof(int));
    
            var maritalStatusParameter = maritalStatus.HasValue ?
                new ObjectParameter("MaritalStatus", maritalStatus) :
                new ObjectParameter("MaritalStatus", typeof(int));
    
            var registerCountryIDParameter = registerCountryID.HasValue ?
                new ObjectParameter("RegisterCountryID", registerCountryID) :
                new ObjectParameter("RegisterCountryID", typeof(int));
    
            var registerStateIDParameter = registerStateID.HasValue ?
                new ObjectParameter("RegisterStateID", registerStateID) :
                new ObjectParameter("RegisterStateID", typeof(int));
    
            var registerCityIDParameter = registerCityID.HasValue ?
                new ObjectParameter("RegisterCityID", registerCityID) :
                new ObjectParameter("RegisterCityID", typeof(int));
    
            var registerDistrictIDParameter = registerDistrictID.HasValue ?
                new ObjectParameter("RegisterDistrictID", registerDistrictID) :
                new ObjectParameter("RegisterDistrictID", typeof(int));
    
            var registerAddressParameter = registerAddress != null ?
                new ObjectParameter("RegisterAddress", registerAddress) :
                new ObjectParameter("RegisterAddress", typeof(string));
    
            var educationLevelIDParameter = educationLevelID.HasValue ?
                new ObjectParameter("EducationLevelID", educationLevelID) :
                new ObjectParameter("EducationLevelID", typeof(int));
    
            var sectionParameter = section.HasValue ?
                new ObjectParameter("Section", section) :
                new ObjectParameter("Section", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Web_EditCMRPatientBase", patientIDParameter, patientNameParameter, identityNumberParameter, birthdayParameter, bodyHeightParameter, bodyWeightParameter, sexIDParameter, raceTypeIDParameter, bloodTypeIDParameter, bloodRhTypeIDParameter, disabledIDParameter, languageTypeIDParameter, religionTypeIDParameter, maritalStatusParameter, registerCountryIDParameter, registerStateIDParameter, registerCityIDParameter, registerDistrictIDParameter, registerAddressParameter, educationLevelIDParameter, sectionParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual int Web_EditCMRPatientDetails(Nullable<int> patientID, Nullable<int> nowCountryID, Nullable<int> nowStateID, Nullable<int> nowCityID, Nullable<int> nowDistrictID, string nowAddress, string homeTelphone, string officeTelphone, string cellPhone, string eMail, Nullable<int> livingStatus, Nullable<int> professionID, Nullable<int> smokeTypeID, Nullable<int> drinkTypeID, Nullable<int> arecaTypeID, Nullable<int> section, string userKey, string iP, ObjectParameter newUserKey)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var nowCountryIDParameter = nowCountryID.HasValue ?
                new ObjectParameter("NowCountryID", nowCountryID) :
                new ObjectParameter("NowCountryID", typeof(int));
    
            var nowStateIDParameter = nowStateID.HasValue ?
                new ObjectParameter("NowStateID", nowStateID) :
                new ObjectParameter("NowStateID", typeof(int));
    
            var nowCityIDParameter = nowCityID.HasValue ?
                new ObjectParameter("NowCityID", nowCityID) :
                new ObjectParameter("NowCityID", typeof(int));
    
            var nowDistrictIDParameter = nowDistrictID.HasValue ?
                new ObjectParameter("NowDistrictID", nowDistrictID) :
                new ObjectParameter("NowDistrictID", typeof(int));
    
            var nowAddressParameter = nowAddress != null ?
                new ObjectParameter("NowAddress", nowAddress) :
                new ObjectParameter("NowAddress", typeof(string));
    
            var homeTelphoneParameter = homeTelphone != null ?
                new ObjectParameter("HomeTelphone", homeTelphone) :
                new ObjectParameter("HomeTelphone", typeof(string));
    
            var officeTelphoneParameter = officeTelphone != null ?
                new ObjectParameter("OfficeTelphone", officeTelphone) :
                new ObjectParameter("OfficeTelphone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var eMailParameter = eMail != null ?
                new ObjectParameter("eMail", eMail) :
                new ObjectParameter("eMail", typeof(string));
    
            var livingStatusParameter = livingStatus.HasValue ?
                new ObjectParameter("LivingStatus", livingStatus) :
                new ObjectParameter("LivingStatus", typeof(int));
    
            var professionIDParameter = professionID.HasValue ?
                new ObjectParameter("ProfessionID", professionID) :
                new ObjectParameter("ProfessionID", typeof(int));
    
            var smokeTypeIDParameter = smokeTypeID.HasValue ?
                new ObjectParameter("SmokeTypeID", smokeTypeID) :
                new ObjectParameter("SmokeTypeID", typeof(int));
    
            var drinkTypeIDParameter = drinkTypeID.HasValue ?
                new ObjectParameter("DrinkTypeID", drinkTypeID) :
                new ObjectParameter("DrinkTypeID", typeof(int));
    
            var arecaTypeIDParameter = arecaTypeID.HasValue ?
                new ObjectParameter("ArecaTypeID", arecaTypeID) :
                new ObjectParameter("ArecaTypeID", typeof(int));
    
            var sectionParameter = section.HasValue ?
                new ObjectParameter("Section", section) :
                new ObjectParameter("Section", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Web_EditCMRPatientDetails", patientIDParameter, nowCountryIDParameter, nowStateIDParameter, nowCityIDParameter, nowDistrictIDParameter, nowAddressParameter, homeTelphoneParameter, officeTelphoneParameter, cellPhoneParameter, eMailParameter, livingStatusParameter, professionIDParameter, smokeTypeIDParameter, drinkTypeIDParameter, arecaTypeIDParameter, sectionParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual int Web_EditCMRPatientKey(Nullable<int> patientID, string medicalRecordNumber, Nullable<int> chronicTypeID, Nullable<int> chronicSubTypeID, Nullable<int> parentUnitID, Nullable<int> unitID, Nullable<int> appUserID, Nullable<bool> enable, Nullable<int> caseStatus, Nullable<int> createUserID, Nullable<int> createDate, Nullable<int> lastUserID, Nullable<int> lastUpdate, Nullable<int> section, string userKey, string iP, ObjectParameter newUserKey)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var medicalRecordNumberParameter = medicalRecordNumber != null ?
                new ObjectParameter("MedicalRecordNumber", medicalRecordNumber) :
                new ObjectParameter("MedicalRecordNumber", typeof(string));
    
            var chronicTypeIDParameter = chronicTypeID.HasValue ?
                new ObjectParameter("ChronicTypeID", chronicTypeID) :
                new ObjectParameter("ChronicTypeID", typeof(int));
    
            var chronicSubTypeIDParameter = chronicSubTypeID.HasValue ?
                new ObjectParameter("ChronicSubTypeID", chronicSubTypeID) :
                new ObjectParameter("ChronicSubTypeID", typeof(int));
    
            var parentUnitIDParameter = parentUnitID.HasValue ?
                new ObjectParameter("ParentUnitID", parentUnitID) :
                new ObjectParameter("ParentUnitID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var appUserIDParameter = appUserID.HasValue ?
                new ObjectParameter("AppUserID", appUserID) :
                new ObjectParameter("AppUserID", typeof(int));
    
            var enableParameter = enable.HasValue ?
                new ObjectParameter("Enable", enable) :
                new ObjectParameter("Enable", typeof(bool));
    
            var caseStatusParameter = caseStatus.HasValue ?
                new ObjectParameter("CaseStatus", caseStatus) :
                new ObjectParameter("CaseStatus", typeof(int));
    
            var createUserIDParameter = createUserID.HasValue ?
                new ObjectParameter("CreateUserID", createUserID) :
                new ObjectParameter("CreateUserID", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(int));
    
            var lastUserIDParameter = lastUserID.HasValue ?
                new ObjectParameter("LastUserID", lastUserID) :
                new ObjectParameter("LastUserID", typeof(int));
    
            var lastUpdateParameter = lastUpdate.HasValue ?
                new ObjectParameter("LastUpdate", lastUpdate) :
                new ObjectParameter("LastUpdate", typeof(int));
    
            var sectionParameter = section.HasValue ?
                new ObjectParameter("Section", section) :
                new ObjectParameter("Section", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Web_EditCMRPatientKey", patientIDParameter, medicalRecordNumberParameter, chronicTypeIDParameter, chronicSubTypeIDParameter, parentUnitIDParameter, unitIDParameter, appUserIDParameter, enableParameter, caseStatusParameter, createUserIDParameter, createDateParameter, lastUserIDParameter, lastUpdateParameter, sectionParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_Get_VideoSchedule_Result> Web_Get_VideoSchedule(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_Get_VideoSchedule_Result>("Web_Get_VideoSchedule", useridParameter);
        }
    
        public virtual ObjectResult<Web_GetAllDMAndUnassignReport_Result> Web_GetAllDMAndUnassignReport(Nullable<int> status, string userKey, string iP, ObjectParameter newUserKey)
        {
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetAllDMAndUnassignReport_Result>("Web_GetAllDMAndUnassignReport", statusParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_GetAllUserAndUnassignReport_Result> Web_GetAllUserAndUnassignReport(Nullable<int> status, string userKey, string iP, ObjectParameter newUserKey)
        {
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetAllUserAndUnassignReport_Result>("Web_GetAllUserAndUnassignReport", statusParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_GetAPPUserByMail_Result> Web_GetAPPUserByMail(string mailAddress)
        {
            var mailAddressParameter = mailAddress != null ?
                new ObjectParameter("MailAddress", mailAddress) :
                new ObjectParameter("MailAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetAPPUserByMail_Result>("Web_GetAPPUserByMail", mailAddressParameter);
        }
    
        public virtual ObjectResult<Web_GetAPPUserInfo_Result> Web_GetAPPUserInfo(Nullable<int> appUserID)
        {
            var appUserIDParameter = appUserID.HasValue ?
                new ObjectParameter("AppUserID", appUserID) :
                new ObjectParameter("AppUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetAPPUserInfo_Result>("Web_GetAPPUserInfo", appUserIDParameter);
        }
    
        public virtual ObjectResult<Web_GetAppUserList_Result> Web_GetAppUserList(string userKey, string iP, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetAppUserList_Result>("Web_GetAppUserList", userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<string> Web_GetAPPUserPassword(Nullable<int> appUserID)
        {
            var appUserIDParameter = appUserID.HasValue ?
                new ObjectParameter("AppUserID", appUserID) :
                new ObjectParameter("AppUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Web_GetAPPUserPassword", appUserIDParameter);
        }
    
        public virtual ObjectResult<string> Web_GetAPPVerifyCode(Nullable<int> patientID, string userKey, string iP, ObjectParameter newUserKey)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Web_GetAPPVerifyCode", patientIDParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Nullable<int>> Web_GetCareGroupXUserUnit(Nullable<int> patientID, string userKey, string iP, ObjectParameter newUserKey)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Web_GetCareGroupXUserUnit", patientIDParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Nullable<int>> Web_GetCGCareGroup(Nullable<int> patientID, string userKey, string iP, ObjectParameter newUserKey)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Web_GetCGCareGroup", patientIDParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Nullable<int>> Web_GetCGGroupXSYSUserUnit(Nullable<int> patientID, string userKey, string iP, ObjectParameter newUserKey)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Web_GetCGGroupXSYSUserUnit", patientIDParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_GetCGServiceRecord_Result> Web_GetCGServiceRecord(Nullable<int> patientID, string userKey, string iP, ObjectParameter newUserKey)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetCGServiceRecord_Result>("Web_GetCGServiceRecord", patientIDParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_GetCMRBasicInformation_Result> Web_GetCMRBasicInformation(Nullable<int> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetCMRBasicInformation_Result>("Web_GetCMRBasicInformation", patientIDParameter);
        }
    
        public virtual ObjectResult<Web_GetCMRContactPerson_Result> Web_GetCMRContactPerson(Nullable<int> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetCMRContactPerson_Result>("Web_GetCMRContactPerson", patientIDParameter);
        }
    
        public virtual ObjectResult<Web_GetCMRDiabetesAlertConfig_Result> Web_GetCMRDiabetesAlertConfig(Nullable<int> patientID, Nullable<int> cGUnitID, string userKey, string iP, ObjectParameter newUserKey)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var cGUnitIDParameter = cGUnitID.HasValue ?
                new ObjectParameter("CGUnitID", cGUnitID) :
                new ObjectParameter("CGUnitID", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetCMRDiabetesAlertConfig_Result>("Web_GetCMRDiabetesAlertConfig", patientIDParameter, cGUnitIDParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_GetCMRDiabetesPlan_Result> Web_GetCMRDiabetesPlan(Nullable<int> patientID, Nullable<int> cGUnitID, string userKey, string iP, ObjectParameter newUserKey)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var cGUnitIDParameter = cGUnitID.HasValue ?
                new ObjectParameter("CGUnitID", cGUnitID) :
                new ObjectParameter("CGUnitID", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetCMRDiabetesPlan_Result>("Web_GetCMRDiabetesPlan", patientIDParameter, cGUnitIDParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_GetDiabetesType_Result> Web_GetDiabetesType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetDiabetesType_Result>("Web_GetDiabetesType");
        }
    
        public virtual ObjectResult<Web_GetDMCareMemberByUserID_Result> Web_GetDMCareMemberByUserID(Nullable<int> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetDMCareMemberByUserID_Result>("Web_GetDMCareMemberByUserID", patientIDParameter);
        }
    
        public virtual ObjectResult<Web_GetDMReportBySYSUnitID_Result> Web_GetDMReportBySYSUnitID(Nullable<int> cGUnitID, string userKey, string iP, ObjectParameter newUserKey)
        {
            var cGUnitIDParameter = cGUnitID.HasValue ?
                new ObjectParameter("CGUnitID", cGUnitID) :
                new ObjectParameter("CGUnitID", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetDMReportBySYSUnitID_Result>("Web_GetDMReportBySYSUnitID", cGUnitIDParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Nullable<int>> Web_GetMedicalRecordNumber(string medicalRecordNumber)
        {
            var medicalRecordNumberParameter = medicalRecordNumber != null ?
                new ObjectParameter("MedicalRecordNumber", medicalRecordNumber) :
                new ObjectParameter("MedicalRecordNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Web_GetMedicalRecordNumber", medicalRecordNumberParameter);
        }
    
        public virtual ObjectResult<Web_GetPatientBloodSugar_Result> Web_GetPatientBloodSugar(Nullable<int> patientID, Nullable<int> glucoseDay, string userKey, string iP, ObjectParameter newUserKey)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var glucoseDayParameter = glucoseDay.HasValue ?
                new ObjectParameter("GlucoseDay", glucoseDay) :
                new ObjectParameter("GlucoseDay", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetPatientBloodSugar_Result>("Web_GetPatientBloodSugar", patientIDParameter, glucoseDayParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_GetPatientMedicineRecord_Result> Web_GetPatientMedicineRecord(string loginUserKey, Nullable<int> patientID)
        {
            var loginUserKeyParameter = loginUserKey != null ?
                new ObjectParameter("LoginUserKey", loginUserKey) :
                new ObjectParameter("LoginUserKey", typeof(string));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetPatientMedicineRecord_Result>("Web_GetPatientMedicineRecord", loginUserKeyParameter, patientIDParameter);
        }
    
        public virtual ObjectResult<Web_GetPatientPressureRecord_Result> Web_GetPatientPressureRecord(Nullable<int> patientID, Nullable<int> pressureDay, string userKey, string iP, ObjectParameter newUserKey)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var pressureDayParameter = pressureDay.HasValue ?
                new ObjectParameter("PressureDay", pressureDay) :
                new ObjectParameter("PressureDay", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetPatientPressureRecord_Result>("Web_GetPatientPressureRecord", patientIDParameter, pressureDayParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_GetPMRPathology_Result> Web_GetPMRPathology(Nullable<int> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetPMRPathology_Result>("Web_GetPMRPathology", patientIDParameter);
        }
    
        public virtual ObjectResult<Web_GetPMRTagChronicName_Result> Web_GetPMRTagChronicName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetPMRTagChronicName_Result>("Web_GetPMRTagChronicName");
        }
    
        public virtual ObjectResult<Web_GetSYSArecaType_Result> Web_GetSYSArecaType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSArecaType_Result>("Web_GetSYSArecaType");
        }
    
        public virtual ObjectResult<Web_GetSYSBloodRhType_Result> Web_GetSYSBloodRhType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSBloodRhType_Result>("Web_GetSYSBloodRhType");
        }
    
        public virtual ObjectResult<Web_GetSYSBloodType_Result> Web_GetSYSBloodType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSBloodType_Result>("Web_GetSYSBloodType");
        }
    
        public virtual ObjectResult<Web_GetSYSCity_Result> Web_GetSYSCity(Nullable<int> stateID)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSCity_Result>("Web_GetSYSCity", stateIDParameter);
        }
    
        public virtual ObjectResult<Web_GetSYSCountry_Result> Web_GetSYSCountry()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSCountry_Result>("Web_GetSYSCountry");
        }
    
        public virtual ObjectResult<Web_GetSYSDistrict_Result> Web_GetSYSDistrict(Nullable<int> cityID)
        {
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSDistrict_Result>("Web_GetSYSDistrict", cityIDParameter);
        }
    
        public virtual ObjectResult<Web_GetSYSDrinkType_Result> Web_GetSYSDrinkType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSDrinkType_Result>("Web_GetSYSDrinkType");
        }
    
        public virtual ObjectResult<Web_GetSYSEducationLevel_Result> Web_GetSYSEducationLevel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSEducationLevel_Result>("Web_GetSYSEducationLevel");
        }
    
        public virtual ObjectResult<Web_GetSYSFunction_Result> Web_GetSYSFunction(string userKey, string iP, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSFunction_Result>("Web_GetSYSFunction", userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_GetSYSLanguageType_Result> Web_GetSYSLanguageType(string userKey, string iP, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSLanguageType_Result>("Web_GetSYSLanguageType", userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_GetSYSLivingStatus_Result> Web_GetSYSLivingStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSLivingStatus_Result>("Web_GetSYSLivingStatus");
        }
    
        public virtual ObjectResult<Web_GetSYSMaritalStatus_Result> Web_GetSYSMaritalStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSMaritalStatus_Result>("Web_GetSYSMaritalStatus");
        }
    
        public virtual ObjectResult<Web_GetSYSMealType_Result> Web_GetSYSMealType(string userKey, string iP, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSMealType_Result>("Web_GetSYSMealType", userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_GetSYSMealTypeTimingType_Result> Web_GetSYSMealTypeTimingType(string userKey, string iP, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSMealTypeTimingType_Result>("Web_GetSYSMealTypeTimingType", userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_GetSYSProfessionType_Result> Web_GetSYSProfessionType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSProfessionType_Result>("Web_GetSYSProfessionType");
        }
    
        public virtual ObjectResult<Web_GetSYSRaceType_Result> Web_GetSYSRaceType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSRaceType_Result>("Web_GetSYSRaceType");
        }
    
        public virtual ObjectResult<Web_GetSYSRelationshipType_Result> Web_GetSYSRelationshipType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSRelationshipType_Result>("Web_GetSYSRelationshipType");
        }
    
        public virtual ObjectResult<Web_GetSYSReligionType_Result> Web_GetSYSReligionType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSReligionType_Result>("Web_GetSYSReligionType");
        }
    
        public virtual ObjectResult<Web_GetSYSRole_Result> Web_GetSYSRole(string userKey, string iP, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSRole_Result>("Web_GetSYSRole", userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_GetSYSServiceRecordType_Result> Web_GetSYSServiceRecordType(string userKey, string iP, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSServiceRecordType_Result>("Web_GetSYSServiceRecordType", userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_GetSYSServiceResult_Result> Web_GetSYSServiceResult(string userKey, string iP, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSServiceResult_Result>("Web_GetSYSServiceResult", userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_GetSYSServiceType_Result> Web_GetSYSServiceType(string userKey, string iP, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSServiceType_Result>("Web_GetSYSServiceType", userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_GetSYSSexType_Result> Web_GetSYSSexType(string userKey, string iP, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSSexType_Result>("Web_GetSYSSexType", userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_GetSYSSmokeType_Result> Web_GetSYSSmokeType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSSmokeType_Result>("Web_GetSYSSmokeType");
        }
    
        public virtual ObjectResult<Web_GetSYSState_Result> Web_GetSYSState()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSState_Result>("Web_GetSYSState");
        }
    
        public virtual ObjectResult<Web_GetSYSTimingType_Result> Web_GetSYSTimingType(string userKey, string iP, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSTimingType_Result>("Web_GetSYSTimingType", userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_GetSYSUnit_Result> Web_GetSYSUnit(string userKey, string iP, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSUnit_Result>("Web_GetSYSUnit", userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_GetSYSUnitReportByRankType11_Result> Web_GetSYSUnitReportByRankType11(string userKey, string iP, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSUnitReportByRankType11_Result>("Web_GetSYSUnitReportByRankType11", userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_GetSYSUnitReportByRankType21_Result> Web_GetSYSUnitReportByRankType21(string userKey, string iP, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSUnitReportByRankType21_Result>("Web_GetSYSUnitReportByRankType21", userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_GetSYSUnitUserByUnitID_Result> Web_GetSYSUnitUserByUnitID(Nullable<int> unitID, string userKey, string iP, ObjectParameter newUserKey)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSUnitUserByUnitID_Result>("Web_GetSYSUnitUserByUnitID", unitIDParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Nullable<int>> Web_GetSYSUserAssignUnit(Nullable<int> userID, string userKey, string iP, ObjectParameter newUserKey)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Web_GetSYSUserAssignUnit", userIDParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_GetSYSUserByID_Result> Web_GetSYSUserByID(Nullable<int> userID, string userKey, string iP, ObjectParameter newUserKey)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSUserByID_Result>("Web_GetSYSUserByID", userIDParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_GetSYSUserList_Result> Web_GetSYSUserList(string userKey, string iP, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetSYSUserList_Result>("Web_GetSYSUserList", userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_GetUserInfo_Result> Web_GetUserInfo(string userKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_GetUserInfo_Result>("Web_GetUserInfo", userKeyParameter);
        }
    
        public virtual ObjectResult<Web_ModifyWorkShift_Result> Web_ModifyWorkShift(Nullable<int> userid, Nullable<System.DateTime> orishiftdate, Nullable<int> oridayofweek, Nullable<System.TimeSpan> oristarttime, Nullable<System.TimeSpan> oriendtime, Nullable<int> modifyuserid, Nullable<System.DateTime> modifyshiftdate, Nullable<int> modifydayofweek, Nullable<System.TimeSpan> modifystarttime, Nullable<System.TimeSpan> modifyendtime, Nullable<int> limituser, Nullable<int> logineduserid, Nullable<bool> flag_external_call)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var orishiftdateParameter = orishiftdate.HasValue ?
                new ObjectParameter("orishiftdate", orishiftdate) :
                new ObjectParameter("orishiftdate", typeof(System.DateTime));
    
            var oridayofweekParameter = oridayofweek.HasValue ?
                new ObjectParameter("oridayofweek", oridayofweek) :
                new ObjectParameter("oridayofweek", typeof(int));
    
            var oristarttimeParameter = oristarttime.HasValue ?
                new ObjectParameter("oristarttime", oristarttime) :
                new ObjectParameter("oristarttime", typeof(System.TimeSpan));
    
            var oriendtimeParameter = oriendtime.HasValue ?
                new ObjectParameter("oriendtime", oriendtime) :
                new ObjectParameter("oriendtime", typeof(System.TimeSpan));
    
            var modifyuseridParameter = modifyuserid.HasValue ?
                new ObjectParameter("modifyuserid", modifyuserid) :
                new ObjectParameter("modifyuserid", typeof(int));
    
            var modifyshiftdateParameter = modifyshiftdate.HasValue ?
                new ObjectParameter("modifyshiftdate", modifyshiftdate) :
                new ObjectParameter("modifyshiftdate", typeof(System.DateTime));
    
            var modifydayofweekParameter = modifydayofweek.HasValue ?
                new ObjectParameter("modifydayofweek", modifydayofweek) :
                new ObjectParameter("modifydayofweek", typeof(int));
    
            var modifystarttimeParameter = modifystarttime.HasValue ?
                new ObjectParameter("modifystarttime", modifystarttime) :
                new ObjectParameter("modifystarttime", typeof(System.TimeSpan));
    
            var modifyendtimeParameter = modifyendtime.HasValue ?
                new ObjectParameter("modifyendtime", modifyendtime) :
                new ObjectParameter("modifyendtime", typeof(System.TimeSpan));
    
            var limituserParameter = limituser.HasValue ?
                new ObjectParameter("limituser", limituser) :
                new ObjectParameter("limituser", typeof(int));
    
            var logineduseridParameter = logineduserid.HasValue ?
                new ObjectParameter("logineduserid", logineduserid) :
                new ObjectParameter("logineduserid", typeof(int));
    
            var flag_external_callParameter = flag_external_call.HasValue ?
                new ObjectParameter("flag_external_call", flag_external_call) :
                new ObjectParameter("flag_external_call", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_ModifyWorkShift_Result>("Web_ModifyWorkShift", useridParameter, orishiftdateParameter, oridayofweekParameter, oristarttimeParameter, oriendtimeParameter, modifyuseridParameter, modifyshiftdateParameter, modifydayofweekParameter, modifystarttimeParameter, modifyendtimeParameter, limituserParameter, logineduseridParameter, flag_external_callParameter);
        }
    
        public virtual ObjectResult<Web_QueryDMCareInfoByUserID_Result> Web_QueryDMCareInfoByUserID(string name, Nullable<int> sexId, string medicalRecordNumber, string homeTelphone, string cellPhone, string userKey, string iP, ObjectParameter newUserKey)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sexIdParameter = sexId.HasValue ?
                new ObjectParameter("SexId", sexId) :
                new ObjectParameter("SexId", typeof(int));
    
            var medicalRecordNumberParameter = medicalRecordNumber != null ?
                new ObjectParameter("MedicalRecordNumber", medicalRecordNumber) :
                new ObjectParameter("MedicalRecordNumber", typeof(string));
    
            var homeTelphoneParameter = homeTelphone != null ?
                new ObjectParameter("HomeTelphone", homeTelphone) :
                new ObjectParameter("HomeTelphone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_QueryDMCareInfoByUserID_Result>("Web_QueryDMCareInfoByUserID", nameParameter, sexIdParameter, medicalRecordNumberParameter, homeTelphoneParameter, cellPhoneParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_QueryDMCaseInfo_Result> Web_QueryDMCaseInfo(string name, Nullable<int> sexId, Nullable<int> raceTypeID, Nullable<System.DateTime> birthday, string medicalRecordNumber)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sexIdParameter = sexId.HasValue ?
                new ObjectParameter("SexId", sexId) :
                new ObjectParameter("SexId", typeof(int));
    
            var raceTypeIDParameter = raceTypeID.HasValue ?
                new ObjectParameter("RaceTypeID", raceTypeID) :
                new ObjectParameter("RaceTypeID", typeof(int));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            var medicalRecordNumberParameter = medicalRecordNumber != null ?
                new ObjectParameter("MedicalRecordNumber", medicalRecordNumber) :
                new ObjectParameter("MedicalRecordNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_QueryDMCaseInfo_Result>("Web_QueryDMCaseInfo", nameParameter, sexIdParameter, raceTypeIDParameter, birthdayParameter, medicalRecordNumberParameter);
        }
    
        public virtual ObjectResult<Web_QuerySYSUser_Result> Web_QuerySYSUser(string name, Nullable<int> sexId, Nullable<int> languageTypeID, Nullable<int> raceTypeID, string jobTitle)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sexIdParameter = sexId.HasValue ?
                new ObjectParameter("SexId", sexId) :
                new ObjectParameter("SexId", typeof(int));
    
            var languageTypeIDParameter = languageTypeID.HasValue ?
                new ObjectParameter("LanguageTypeID", languageTypeID) :
                new ObjectParameter("LanguageTypeID", typeof(int));
    
            var raceTypeIDParameter = raceTypeID.HasValue ?
                new ObjectParameter("RaceTypeID", raceTypeID) :
                new ObjectParameter("RaceTypeID", typeof(int));
    
            var jobTitleParameter = jobTitle != null ?
                new ObjectParameter("JobTitle", jobTitle) :
                new ObjectParameter("JobTitle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_QuerySYSUser_Result>("Web_QuerySYSUser", nameParameter, sexIdParameter, languageTypeIDParameter, raceTypeIDParameter, jobTitleParameter);
        }
    
        public virtual int Web_RemoveCGCareGroup(Nullable<int> patientID, Nullable<int> unitID, string userKey, string iP, ObjectParameter newUserKey)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Web_RemoveCGCareGroup", patientIDParameter, unitIDParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual int Web_Role_GetControlLevel(Nullable<int> menuID, Nullable<int> controlLevel, string userKey, string iP, ObjectParameter newUserKey)
        {
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("MenuID", menuID) :
                new ObjectParameter("MenuID", typeof(int));
    
            var controlLevelParameter = controlLevel.HasValue ?
                new ObjectParameter("ControlLevel", controlLevel) :
                new ObjectParameter("ControlLevel", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Web_Role_GetControlLevel", menuIDParameter, controlLevelParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_Role_GetMainMenu_Result> Web_Role_GetMainMenu(string userKey, string iP, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_Role_GetMainMenu_Result>("Web_Role_GetMainMenu", userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_Role_GetRoleName_Result> Web_Role_GetRoleName(string userKey, string iP, ObjectParameter newUserKey)
        {
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_Role_GetRoleName_Result>("Web_Role_GetRoleName", userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual ObjectResult<Web_Role_GetSubMenu_Result> Web_Role_GetSubMenu(Nullable<int> parentMenuID, string userKey, string iP, ObjectParameter newUserKey)
        {
            var parentMenuIDParameter = parentMenuID.HasValue ?
                new ObjectParameter("ParentMenuID", parentMenuID) :
                new ObjectParameter("ParentMenuID", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Web_Role_GetSubMenu_Result>("Web_Role_GetSubMenu", parentMenuIDParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual int Web_Role_SetUserRole(Nullable<int> userID, Nullable<int> roleID, string userKey, string iP, ObjectParameter newUserKey)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Web_Role_SetUserRole", userIDParameter, roleIDParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual int Web_UpdateAPPUser(string medicalRecordNumber, Nullable<int> appUserID, string name, Nullable<int> sexID, Nullable<System.DateTime> birthday, string identityNumber, Nullable<int> chronicSubTypeID, Nullable<System.DateTime> diagnosisDate, Nullable<decimal> bodyHeight, Nullable<decimal> bodyWeight, string mobileNumber, Nullable<bool> enable, Nullable<int> lastUserID)
        {
            var medicalRecordNumberParameter = medicalRecordNumber != null ?
                new ObjectParameter("MedicalRecordNumber", medicalRecordNumber) :
                new ObjectParameter("MedicalRecordNumber", typeof(string));
    
            var appUserIDParameter = appUserID.HasValue ?
                new ObjectParameter("AppUserID", appUserID) :
                new ObjectParameter("AppUserID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sexIDParameter = sexID.HasValue ?
                new ObjectParameter("SexID", sexID) :
                new ObjectParameter("SexID", typeof(int));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            var identityNumberParameter = identityNumber != null ?
                new ObjectParameter("IdentityNumber", identityNumber) :
                new ObjectParameter("IdentityNumber", typeof(string));
    
            var chronicSubTypeIDParameter = chronicSubTypeID.HasValue ?
                new ObjectParameter("ChronicSubTypeID", chronicSubTypeID) :
                new ObjectParameter("ChronicSubTypeID", typeof(int));
    
            var diagnosisDateParameter = diagnosisDate.HasValue ?
                new ObjectParameter("DiagnosisDate", diagnosisDate) :
                new ObjectParameter("DiagnosisDate", typeof(System.DateTime));
    
            var bodyHeightParameter = bodyHeight.HasValue ?
                new ObjectParameter("BodyHeight", bodyHeight) :
                new ObjectParameter("BodyHeight", typeof(decimal));
    
            var bodyWeightParameter = bodyWeight.HasValue ?
                new ObjectParameter("BodyWeight", bodyWeight) :
                new ObjectParameter("BodyWeight", typeof(decimal));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var enableParameter = enable.HasValue ?
                new ObjectParameter("Enable", enable) :
                new ObjectParameter("Enable", typeof(bool));
    
            var lastUserIDParameter = lastUserID.HasValue ?
                new ObjectParameter("LastUserID", lastUserID) :
                new ObjectParameter("LastUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Web_UpdateAPPUser", medicalRecordNumberParameter, appUserIDParameter, nameParameter, sexIDParameter, birthdayParameter, identityNumberParameter, chronicSubTypeIDParameter, diagnosisDateParameter, bodyHeightParameter, bodyWeightParameter, mobileNumberParameter, enableParameter, lastUserIDParameter);
        }
    
        public virtual int Web_UpdateSYSUnit(Nullable<int> unitID, Nullable<int> parentUnitID, string unitName, string userKey, string iP, ObjectParameter newUserKey)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var parentUnitIDParameter = parentUnitID.HasValue ?
                new ObjectParameter("ParentUnitID", parentUnitID) :
                new ObjectParameter("ParentUnitID", typeof(int));
    
            var unitNameParameter = unitName != null ?
                new ObjectParameter("UnitName", unitName) :
                new ObjectParameter("UnitName", typeof(string));
    
            var userKeyParameter = userKey != null ?
                new ObjectParameter("UserKey", userKey) :
                new ObjectParameter("UserKey", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Web_UpdateSYSUnit", unitIDParameter, parentUnitIDParameter, unitNameParameter, userKeyParameter, iPParameter, newUserKey);
        }
    
        public virtual int Web_UserLogin(Nullable<int> unitID, string account, string password, string iP, ObjectParameter userKey)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var accountParameter = account != null ?
                new ObjectParameter("Account", account) :
                new ObjectParameter("Account", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Web_UserLogin", unitIDParameter, accountParameter, passwordParameter, iPParameter, userKey);
        }
    
        public virtual int Web_AddContactPerson()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Web_AddContactPerson");
        }
    }
}
